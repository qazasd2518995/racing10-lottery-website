<!DOCTYPE html>
<html lang="zh-tw">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <title>極速賽車 - 生產版</title>
    <link rel="icon" type="image/svg+xml" href="favicon.svg">
    <!-- <link rel="stylesheet" href="./src/styles/main.css?v=1.5"> 已移除，避免Vuetify衝突 -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <!-- 先引入 Vue -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- 然後引入組件 -->
    <script src="./src/components/BetRecords.js?v=2025061901"></script>
          <script src="./src/components/DrawHistory.js?v=2025061901"></script>
    <script>
        // 登入檢查處理
        document.addEventListener('DOMContentLoaded', async function() {
            // 防止無限重定向
            if (window.location.pathname.endsWith('login.html') && sessionStorage.getItem('isLoggedIn') === 'true') {
                window.location.href = 'index.html';
                return;
            }

            const isLoggedIn = sessionStorage.getItem('isLoggedIn');
            if (!isLoggedIn || isLoggedIn !== 'true') {
                // 重定向到登入頁面
                window.location.href = 'login.html';
                return;
            }
            
            // 檢查是否有必要的登入資訊
            const username = sessionStorage.getItem('username');
            
            if (!username) {
                // 登入資訊不完整，重新登入
                sessionStorage.clear();
                window.location.href = 'login.html';
                return;
            }

            // 會話驗證改為非阻塞式，避免網路問題造成無限重定向
            try {
                const response = await fetch('/api/member/check-session', {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'Authorization': `Bearer ${sessionStorage.getItem('token') || ''}`
                    }
                });

                if (!response.ok) {
                    console.warn('Session validation failed, but continuing...');
                    // 不立即清除登入狀態，讓用戶繼續使用
                }
            } catch (error) {
                console.warn('Session validation error:', error);
                // 網路錯誤時不清除登入狀態，讓用戶繼續使用
            }
        });
    </script>
    <style>
        /* 基礎字體設定 - 確保電腦和手機顯示一致 */
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        
        /* 增強版開獎動畫系統 */
        
        /* 基礎動畫效果 */
        @keyframes numberBounce {
            0% { transform: translateY(0) scale(1); }
            50% { transform: translateY(-20px) scale(1.1); }
            100% { transform: translateY(0) scale(1); }
        }
        
        @keyframes numberSpin {
            0% { transform: rotateY(0) scale(1); }
            50% { transform: rotateY(180deg) scale(1.2); }
            100% { transform: rotateY(360deg) scale(1); }
        }
        
        @keyframes highlightWinner {
            0% { 
                box-shadow: 0 0 10px 3px rgba(255, 215, 0, 0.6);
                transform: scale(1);
            }
            50% { 
                box-shadow: 0 0 25px 8px rgba(255, 215, 0, 0.9);
                transform: scale(1.05);
            }
            100% { 
                box-shadow: 0 0 10px 3px rgba(255, 215, 0, 0.6);
                transform: scale(1);
            }
        }
        
        /* 🏎️ 賽車動畫容器 - 修正高度避免多餘跑道 */
        .race-animation-container {
            height: 400px; /* 調整高度以適應10輛車 */
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            position: relative;
            overflow: hidden;
            margin: 20px;
            border-radius: 15px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
            border: 2px solid rgba(255, 255, 255, 0.1);
        }
        
        /* 🏁 跑道軌道 - 精確對應10輛車的高度 */
        .race-track-lines {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: repeating-linear-gradient(
                0deg,
                transparent,
                transparent 38px,
                rgba(255, 255, 255, 0.1) 38px,
                rgba(255, 255, 255, 0.1) 40px
            );
        }
        
        /* 🚗 賽車樣式 - 更擬真的賽車設計 */
        .car-racer {
            width: 60px;
            height: 30px;
            position: absolute;
            transition: all 3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 16px;
            color: white;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.8);
        }
        
        /* 賽車形狀 */
        .car-racer::before {
            content: '🏎️';
            position: absolute;
            font-size: 35px;
            left: -5px;
            top: 50%;
            transform: translateY(-50%);
            z-index: 1;
            filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5));
        }
        
        /* 車號顯示 */
        .car-racer::after {
            content: attr(data-number);
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: white;
            color: black;
            width: 22px;
            height: 22px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            z-index: 2;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        

        
        /* 終點線 */
        .race-finish-line {
            position: absolute;
            right: 50px;
            top: 20px;
            height: calc(100% - 40px);
            width: 10px;
            background: repeating-linear-gradient(
                to bottom,
                #000,
                #000 10px,
                #fff 10px,
                #fff 20px
            );
            border: 2px solid #ff0000;
            border-radius: 4px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.5);
        }
        
        /* ✨ 粒子效果容器 */
        .particles-container {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
            overflow: hidden;
        }
        
        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: #ffd700;
            border-radius: 50%;
            animation: particleFloat 3s linear forwards;
        }
        
        @keyframes particleFloat {
            0% {
                opacity: 1;
                transform: translateY(0) scale(0);
            }
            50% {
                opacity: 0.8;
                transform: translateY(-50px) scale(1);
            }
            100% {
                opacity: 0;
                transform: translateY(-100px) scale(0);
            }
        }
        
        /* 🎯 結果球增強樣式 */
        .number-ball.animating {
            animation: numberBounce 0.6s ease-out;
        }
        
        .number-ball.spinning {
            animation: numberSpin 1s ease-in-out;
        }
        
        .number-ball.winning {
            animation: highlightWinner 2s ease-in-out infinite;
            z-index: 10;
        }
        
        /* 🌟 特殊排名樣式 - 移除發光效果，保持與主畫面一致 */
        .number-ball.champion,
        .number-ball.runner-up,
        .number-ball.third-place {
            /* 移除發光動畫，與主畫面球號樣式保持一致 */
            animation: none !important;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2) !important;
        }
        
        /* 🎊 開獎狀態指示器 */
        .drawing-indicator {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: #ffd700;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            text-align: center;
            z-index: 100;
            animation: pulse 1.5s ease-in-out infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: translate(-50%, -50%) scale(1); opacity: 0.9; }
            50% { transform: translate(-50%, -50%) scale(1.05); opacity: 1; }
        }
        
        /* 洗球動畫效果 */
        @keyframes ballWashing {
            0% { transform: translateY(0) scale(1.1) rotate(0deg); }
            25% { transform: translateY(-8px) scale(1.15) rotate(90deg); }
            50% { transform: translateY(0) scale(1.2) rotate(180deg); }
            75% { transform: translateY(8px) scale(1.15) rotate(270deg); }
            100% { transform: translateY(0) scale(1.1) rotate(360deg); }
        }

        @keyframes gradientWashing {
            0% { background-position: 0% 0%; }
            50% { background-position: 100% 100%; }
            100% { background-position: 0% 0%; }
        }

        @keyframes containerWashing {
            0%, 100% { 
                box-shadow: 0 0 15px rgba(255, 107, 107, 0.6); 
                border: 2px solid rgba(255, 107, 107, 0.3);
            }
            25% { 
                box-shadow: 0 0 25px rgba(78, 205, 196, 0.6); 
                border: 2px solid rgba(78, 205, 196, 0.3);
            }
            50% { 
                box-shadow: 0 0 35px rgba(69, 183, 209, 0.6); 
                border: 2px solid rgba(69, 183, 209, 0.3);
            }
            75% { 
                box-shadow: 0 0 25px rgba(150, 206, 180, 0.6); 
                border: 2px solid rgba(150, 206, 180, 0.3);
            }
        }

        @keyframes ballReveal {
            0% { 
                transform: scale(0.8); 
                opacity: 0.7; 
                box-shadow: 0 0 20px rgba(255, 215, 0, 0.8);
            }
            50% { 
                transform: scale(1.3); 
                opacity: 0.9; 
                box-shadow: 0 0 30px rgba(255, 215, 0, 1);
            }
            100% { 
                transform: scale(1); 
                opacity: 1; 
                box-shadow: none;
            }
        }

        .washing-ball {
            color: white !important;
            font-weight: bold !important;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.8) !important;
        }
        
        /* 🎭 開獎完成慶祝效果 */
        .celebration-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle, rgba(255,215,0,0.1) 0%, transparent 70%);
            pointer-events: none;
            animation: celebrationPulse 3s ease-out forwards;
        }
        
        @keyframes celebrationPulse {
            0% { opacity: 0; transform: scale(0.8); }
            50% { opacity: 1; transform: scale(1.1); }
            100% { opacity: 0; transform: scale(1.2); }
        }
        
        /* 🚫 V2.0 - 強制隱藏舊結構，確保新結構顯示 */
        .results-display:not(.results-display-new) {
            display: none !important;
        }
        
        .results-grid,
        .results-display .results-grid,
        .result-item,
        .result-ball,
        .position-label {
            display: none !important;
        }
        
        /* 🔥 強制緩存失效 - v2.0.1 */
        .results-display-new {
            display: block !important;
            visibility: visible !important;
        }

        /* 🎯 開獎結果佈局 - 確保任何寬度都能完整顯示10顆球 */
        .results-display-new {
            padding: 15px 5px !important;
            background: rgba(255, 255, 255, 0.1) !important;
            backdrop-filter: blur(10px) !important;
            border-radius: 12px !important;
            margin: 10px 0 !important;
            border: 1px solid rgba(255, 255, 255, 0.2) !important;
            position: relative !important;
        }

        .results-container-new {
            display: flex !important;
            flex-wrap: nowrap !important;
            justify-content: space-between !important;
            align-items: center !important;
            width: 100% !important;
            max-width: 100% !important;
            padding: 0 4px !important;
            gap: 6px !important;
        }

        .result-slot-new {
            flex: 1 1 auto !important;
            display: flex !important;
            flex-direction: column !important;
            align-items: center !important;
            justify-content: center !important;
            min-width: 0 !important;
            max-width: none !important;
        }



        .position-label-new {
            font-size: clamp(8px, 1.8vw, 12px) !important;
            font-weight: 600 !important;
            color: white !important;
            text-align: center !important;
            line-height: 1 !important;
            background: rgba(0, 0, 0, 0.6) !important;
            border-radius: 4px !important;
            padding: 2px 4px !important;
            backdrop-filter: blur(5px) !important;
            white-space: nowrap !important;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8) !important;
            border: 1px solid rgba(255, 255, 255, 0.2) !important;
            width: 100% !important;
            box-sizing: border-box !important;
        }

        /* 🎯 響應式設計 - 針對不同螢幕尺寸優化球的顯示 */
        @media (max-width: 320px) {
            .results-display-new {
                padding: 8px 2px !important;
            }
            .results-container-new {
                gap: 1px !important;
                padding: 0 1px !important;
            }
            .position-label-new {
                font-size: 7px !important;
                padding: 1px 2px !important;
            }
        }

        @media (min-width: 321px) and (max-width: 375px) {
            .results-display-new {
                padding: 10px 3px !important;
            }
            .position-label-new {
                font-size: 8px !important;
            }
        }

        @media (min-width: 376px) and (max-width: 430px) {
            .results-display-new {
                padding: 12px 4px !important;
            }
            .position-label-new {
                font-size: 9px !important;
            }
        }

        @media (min-width: 431px) and (max-width: 768px) {
            .results-display-new {
                padding: 15px 5px !important;
            }
            .position-label-new {
                font-size: 10px !important;
            }
        }

        @media (min-width: 769px) {
            .results-display-new {
                padding: 20px 10px !important;
            }
            .position-label-new {
                font-size: 12px !important;
                padding: 3px 5px !important;
            }
        }

        /* 確保開獎結果水平排列 */
        .current-result, .race-result {
            display: flex !important;
            flex-direction: row !important;
            justify-content: space-between !important;
            flex-wrap: nowrap !important;
            overflow-x: visible !important;
            width: 100% !important;
            padding: 5px 8px !important;
        }
        
        /* 歷史記錄 */
        .history-item {
            padding: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .history-item .period-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        
        .history-item .period {
            font-weight: bold;
        }
        
        .history-item .time {
            color: #888;
        }
        
        .history-item .result-balls {
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
            overflow-x: auto;
            justify-content: space-between;
            padding: 5px 0;
        }
        
        .no-records {
            padding: 20px;
            text-align: center;
            color: #888;
        }
        
        .history-header {
            background-color: #0e6f3d;
            color: white;
            padding: 10px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .history-header .title {
            font-size: 18px;
            font-weight: bold;
        }
        
        .history-header .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
        }
        
        /* 快速投注樣式 */
        .position-selector {
            margin-bottom: 20px;
        }
        
        .position-tabs {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }
        
        .position-tab {
            padding: 8px 12px;
            background: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }
        
        .position-tab:hover {
            background: #e8f4f8;
            border-color: #4CAF50;
        }
        
        .position-tab.active {
            background: #4CAF50;
            color: white;
            border-color: #4CAF50;
        }
        
        .position-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 10px;
            padding: 8px 12px;
            background-color: #f8f9fa;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }
        
        .selected-count {
            font-size: 14px;
            color: #28a745;
            font-weight: 500;
        }
        
        .clear-positions {
            padding: 4px 12px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        .clear-positions:hover {
            background-color: #c82333;
        }
        
        .no-position-hint {
            text-align: center;
            padding: 40px 20px;
            color: #888;
            font-size: 16px;
        }
        
        .no-position-hint p {
            margin: 0;
        }
        
        /* 現代化導航欄樣式 */
        .modern-navbar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
            padding: 0;
        }
        
        .navbar-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 12px 20px;
            display: grid;
            grid-template-columns: auto 1fr auto;
            align-items: center;
            gap: 20px;
        }
        
        /* Logo區域 */
        .navbar-brand {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .logo-icon {
            font-size: 32px;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        
        .brand-title {
            font-size: 18px;
            font-weight: 700;
            color: white;
            margin: 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            letter-spacing: 1px;
            white-space: nowrap;
        }
        
        /* 用戶信息區域 */
        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
            background: rgba(255, 255, 255, 0.35);
            backdrop-filter: blur(10px);
            border-radius: 25px;
            padding: 8px 20px;
            border: 1px solid rgba(255, 255, 255, 0.4);
            justify-self: center;
        }
        
        .user-avatar {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 18px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        }
        
        .user-details {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }
        
        .username {
            color: white;
            font-size: 14px;
            font-weight: 500;
            opacity: 0.9;
        }
        
        .balance-amount {
            color: #ffd700;
            font-size: 18px;
            font-weight: 700;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }
        
        .balance-amount.changed {
            animation: balancePulse 0.6s ease;
        }
        
        .daily-profit {
            font-size: 13px;
            font-weight: 500;
            margin-top: 2px;
            text-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        
        .daily-profit.profit-positive {
            color: #28a745 !important; /* 綠色文字 - 賺錢 */
        }
        
        .daily-profit.profit-negative {
            color: #dc3545 !important; /* 紅色文字 - 虧損 */
        }
        
        .daily-profit.profit-zero {
            color: #495057 !important; /* 深灰色文字 - 無虧損 */
            font-weight: 600 !important;
        }
        
        /* 盈虧記錄顏色樣式 */
        .profit-amount.profit-positive,
        .value.profit-positive {
            color: #28a745 !important; /* 綠色 - 賺錢 */
        }
        
        .profit-amount.profit-negative,
        .value.profit-negative {
            color: #dc3545 !important; /* 紅色 - 虧損 */
        }
        
        .profit-amount.profit-zero,
        .value.profit-zero {
            color: #495057 !important; /* 深灰色 - 無虧損 */
        }
        
        /* 盈虧記錄模態框樣式 - 由外部CSS文件控制 */
        
        .profit-header, .detail-header {
            background-color: #0e6f3d;
            color: white;
            padding: 20px 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .time-range-tabs {
            display: flex;
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        
        .time-range-tabs .tab {
            flex: 1;
            text-align: center;
            cursor: pointer;
            font-weight: 500;
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
        }
        
        .time-range-tabs .tab:hover {
            background-color: #e9ecef;
        }
        
        .time-range-tabs .tab.active {
            background-color: white;
            border-bottom-color: #0e6f3d;
            color: #0e6f3d;
        }
        
        .profit-list, .detail-list {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }
        
        .profit-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #f1f1f1;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        
        .detail-item {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            padding: 16px 20px;
            border-bottom: 1px solid #f1f1f1;
            transition: background-color 0.2s ease;
        }
        
        .profit-item:hover {
            background-color: #f8f9fa;
        }
        
        .profit-date {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }
        
        .profit-date .date {
            font-weight: 600;
        }
        
        .profit-date .weekday {
            color: #6c757d;
        }
        
        .profit-stats {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 2px;
        }
        
        .bet-count {
            color: #6c757d;
        }
        
        .profit-amount {
            font-weight: 600;
        }
        
        .profit-summary, .day-summary {
            background-color: #f8f9fa;
            border-top: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            padding: 20px 24px;
        }
        
        .summary-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }
        
        .summary-item .label {
            color: #6c757d;
        }
        
        .summary-item .value {
            font-weight: 600;
        }
        
        .bet-info {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }
        
        .bet-info .period {
            font-weight: 600;
            font-size: 14px;
        }
        
        .bet-info .bet-type {
            font-size: 12px;
            color: #6c757d;
        }
        
        .bet-info .time {
            font-size: 11px;
            color: #adb5bd;
        }
        
        .bet-info .draw-result {
            display: flex;
            gap: 4px;
            margin-top: 2px;
        }
        
        .result-number {
            background: #007bff;
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: bold;
        }
        
        .bet-result {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 2px;
        }
        
        .bet-result .odds {
            font-size: 11px;
            color: #6c757d;
        }
        
        /* 複用投注記錄樣式 */
        .record-list {
            overflow-y: auto;
            flex: 1;
            padding: 10px;
        }

        .record-item {
            background-color: #f9f9f9;
            border-radius: 8px;
            margin-bottom: 15px;
            padding: 12px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            border-left: 5px solid #47824A;
        }

        .record-top {
            display: flex;
            justify-content: space-between;
            border-bottom: 1px solid #eee;
            padding-bottom: 8px;
            margin-bottom: 10px;
        }

        .record-top .period {
            font-weight: bold;
            color: #333;
        }

        .record-top .status {
            padding: 3px 10px;
            border-radius: 15px;
            font-size: 14px;
        }

        .record-top .status.win {
            background-color: #47bf74;
            color: white;
        }

        .record-top .status.lose {
            background-color: #e74c3c;
            color: white;
        }

        /* 投注資訊區域樣式 */
        .record-bet-info {
            margin-bottom: 10px;
            padding: 12px;
            background-color: #f5f5f5;
            border-radius: 6px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .bet-detail-row {
            display: flex;
            margin-bottom: 10px;
            align-items: center;
        }

        .bet-detail-row:last-child {
            margin-bottom: 0;
        }

        .bet-label {
            width: 85px;
            color: #666;
            font-size: 14px;
            font-weight: 500;
        }

        .bet-value {
            color: #333;
            font-weight: 600;
            flex: 1;
            background-color: #fff;
            padding: 6px 10px;
            border-radius: 4px;
            border-left: 3px solid #47824A;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        /* 底部資訊樣式 */
        .record-bottom {
            border-top: 1px solid #eee;
            padding-top: 10px;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .bet-time-info {
            display: flex;
            align-items: center;
            color: #777;
            font-size: 13px;
        }

        .time-value {
            margin-left: 5px;
        }

        .bet-amount-info {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .amount-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .amount-label {
            color: #555;
        }

        .amount-value {
            font-weight: bold;
            color: #333;
        }

        .win-amount .amount-value {
            color: #e67e22;
        }

        /* 開獎號碼顯示樣式 */
        .draw-result-row {
            border-top: 1px solid #eee;
            padding-top: 8px;
            margin-top: 8px;
            align-items: flex-start !important;
        }
        
        .draw-result-row .bet-value {
            display: flex;
            align-items: center;
            padding: 8px 10px;
        }

        .draw-result-balls {
            display: flex;
            gap: 4px;
            flex-wrap: wrap;
        }

        .result-ball {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 12px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .result-ball.color-1 { background-color: #e74c3c; }
        .result-ball.color-2 { background-color: #3498db; }
        .result-ball.color-3 { background-color: #95a5a6; }
        .result-ball.color-4 { background-color: #f39c12; }
        .result-ball.color-5 { background-color: #1abc9c; }
        .result-ball.color-6 { background-color: #9b59b6; }
        .result-ball.color-7 { background-color: #34495e; }
        .result-ball.color-8 { background-color: #e67e22; }
        .result-ball.color-9 { background-color: #2ecc71; }
        .result-ball.color-10 { background-color: #f1c40f; }
        
        .bet-result .amount {
            font-weight: 500;
            font-size: 14px;
        }
        
        .win-status.win {
            color: #28a745;
            font-size: 12px;
            font-weight: 600;
        }
        
        .win-status.lose {
            color: #dc3545;
            font-size: 12px;
            font-weight: 600;
        }
        
        .win-amount {
            font-weight: 600;
            font-size: 14px;
        }
        
        @keyframes balancePulse {
            0%, 100% { transform: scale(1); color: #ffd700; }
            50% { transform: scale(1.1); color: #00ff88; }
        }
        
        /* 功能按鈕區域 */
        .navbar-actions {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .action-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 4px;
            padding: 8px 15px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            color: white;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 70px;
            height: 40px;
        }
        
        .action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .action-btn .icon {
            font-size: 20px;
            filter: drop-shadow(1px 1px 2px rgba(0, 0, 0, 0.3));
        }
        
        /* 下拉菜單 */
        .menu-dropdown {
            position: relative;
        }
        
        .dropdown-panel {
            position: absolute;
            top: 100%;
            right: 0;
            margin-top: 8px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            border: 1px solid rgba(0, 0, 0, 0.05);
            min-width: 280px;
            overflow: hidden;
            z-index: 1001;
        }
        
        .hot-bets-section {
            padding: 16px;
        }
        
        .section-title {
            font-size: 14px;
            font-weight: 600;
            color: #333;
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .hot-bet-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .hot-bet-option {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 12px;
            background: #f8f9fa;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .hot-bet-option:hover {
            background: #e9ecef;
            transform: translateX(4px);
        }
        
        .bet-label {
            font-size: 13px;
            color: #495057;
            font-weight: 500;
        }
        
        .hot-indicator {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            font-size: 10px;
            font-weight: 600;
            padding: 2px 8px;
            border-radius: 12px;
            letter-spacing: 0.5px;
        }
        
        .dropdown-divider {
            height: 1px;
            background: #e9ecef;
            margin: 8px 0;
        }
        
        .dropdown-action {
            width: 100%;
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 16px;
            background: none;
            border: none;
            color: #495057;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .dropdown-action:hover {
            background: #f8f9fa;
        }
        
        .logout-btn:hover {
            background: #ffe6e6;
            color: #dc3545;
        }
        
        /* 登入區域 */
        .login-section {
            justify-self: end;
        }
        
        .login-form {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .login-input {
            padding: 10px 15px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 14px;
            width: 120px;
            backdrop-filter: blur(10px);
        }
        
        .login-input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }
        
        .login-input:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.5);
            background: rgba(255, 255, 255, 0.15);
        }
        
        .login-btn {
            padding: 10px 20px;
            background: linear-gradient(45deg, #28a745, #20c997);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        }
        
        .login-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        /* ========================= 投注選項區域樣式 ========================= */
        
        /* 投注標籤頁 */
        .betting-tabs {
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            margin: 20px 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            overflow: hidden;
            position: relative;
            z-index: 1;
        }
        
        .betting-tabs.disabled {
            opacity: 0.5;
            pointer-events: none;
        }
        
        /* 標籤頁導航 */
        .tabs {
            display: flex;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-bottom: 2px solid rgba(0, 0, 0, 0.05);
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }
        
        .tab {
            flex: 1;
            padding: 15px 12px;
            text-align: center;
            color: #6c757d;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
            background: transparent;
            position: relative;
            white-space: nowrap;
            min-width: 100px;
        }
        
        .tab:hover {
            color: #495057;
            background: rgba(255, 255, 255, 0.7);
        }
        
        .tab.active {
            color: #007bff;
            background: rgba(0, 123, 255, 0.1);
            border-bottom-color: #007bff;
            box-shadow: inset 0 -2px 0 #007bff;
        }
        
        /* 標籤頁內容 */
        .tab-content {
            padding: 20px;
            background: rgba(255, 255, 255, 0.9);
        }
        
        /* 投注組別 */
        .betting-group {
            margin-bottom: 25px;
            padding: 18px;
            background: rgba(248, 249, 250, 0.8);
            border-radius: 12px;
            border: 1px solid rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            position: relative;
            z-index: 0;
        }
        
        .betting-group:hover {
            background: rgba(248, 249, 250, 1);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        }
        
        .group-title {
            font-size: 16px;
            font-weight: 700;
            color: #495057;
            margin-bottom: 15px;
            padding-bottom: 8px;
            border-bottom: 2px solid #e9ecef;
            text-align: center;
            position: relative;
        }
        
        .group-title::before {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 50%;
            transform: translateX(-50%);
            width: 40px;
            height: 2px;
            background: linear-gradient(45deg, #007bff, #28a745);
            border-radius: 1px;
        }
        
        /* 投注選項容器 */
        .betting-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
            gap: 12px;
            margin-top: 15px;
        }
        
        /* 數字選項特殊布局 */
        .betting-options.numbers {
            grid-template-columns: repeat(auto-fill, minmax(55px, 1fr));
            gap: 8px;
        }
        
        /* 和值選項特殊布局 */
        .betting-options.sum-values {
            grid-template-columns: repeat(auto-fill, minmax(65px, 1fr));
            gap: 6px;
        }
        
        /* 屬性選項布局 */
        .betting-options.properties {
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }
        
        /* 投注選項按鈕 */
        .option {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 12px 8px;
            background: linear-gradient(135deg, #ffffff, #f8f9fa);
            border: 2px solid #e9ecef;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            min-height: 60px;
            font-weight: 600;
            color: #495057;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        }
        
        .option:hover {
            border-color: #007bff;
            background: linear-gradient(135deg, #e3f2fd, #bbdefb);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 123, 255, 0.2);
            color: #1565c0;
        }
        
        .option.selected {
            background: linear-gradient(135deg, #007bff, #0056b3);
            border-color: #0056b3;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 123, 255, 0.4);
        }
        
        .option.selected:hover {
            background: linear-gradient(135deg, #0056b3, #004085);
            border-color: #004085;
        }
        
        /* 投注項目文字 */
        .option span:first-child {
            font-size: 14px;
            font-weight: 700;
            margin-bottom: 4px;
            line-height: 1.2;
        }
        
        /* 賠率顯示 */
        .option .odds {
            font-size: 12px;
            font-weight: 600;
            opacity: 0.8;
            background: rgba(0, 0, 0, 0.1);
            padding: 2px 6px;
            border-radius: 6px;
            min-width: 35px;
            text-align: center;
        }
        
        .option.selected .odds {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }
        
        /* 數字按鈕特殊樣式 */
        .betting-options.numbers .option {
            min-height: 45px;
            padding: 8px 4px;
            border-radius: 8px;
        }
        
        .betting-options.numbers .option span:first-child {
            font-size: 16px;
            font-weight: 800;
            margin-bottom: 2px;
        }
        
        .betting-options.numbers .option .odds {
            font-size: 10px;
            padding: 1px 4px;
            min-width: 30px;
        }
        
        /* 和值按鈕特殊樣式 */
        .betting-options.sum-values .option {
            min-height: 50px;
            padding: 6px 4px;
        }
        
        .betting-options.sum-values .option span:first-child {
            font-size: 15px;
            font-weight: 800;
        }
        
        .betting-options.sum-values .option .odds {
            font-size: 9px;
            padding: 1px 3px;
            min-width: 25px;
        }
        
        /* 龍虎按鈕特殊樣式 */
        .option.dragon {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            border-color: #ee5a24;
            color: white;
        }
        
        .option.dragon:hover {
            background: linear-gradient(135deg, #ee5a24, #d63031);
            border-color: #d63031;
        }
        
        .option.tiger {
            background: linear-gradient(135deg, #ffd93d, #ffb74d);
            border-color: #ffb74d;
            color: #5d4037;
        }
        
        .option.tiger:hover {
            background: linear-gradient(135deg, #ffb74d, #ff9800);
            border-color: #ff9800;
        }
        
        /* 大小單雙特殊顏色樣式 */
        .option.big-option {
            background: linear-gradient(135deg, #4caf50, #388e3c);
            border-color: #388e3c;
            color: white;
        }
        
        .option.big-option:hover {
            background: linear-gradient(135deg, #388e3c, #2e7d32);
            border-color: #2e7d32;
        }
        
        .option.small-option {
            background: linear-gradient(135deg, #2196f3, #1976d2);
            border-color: #1976d2;
            color: white;
        }
        
        .option.small-option:hover {
            background: linear-gradient(135deg, #1976d2, #1565c0);
            border-color: #1565c0;
        }
        
        .option.odd-option {
            background: linear-gradient(135deg, #ff9800, #f57c00);
            border-color: #f57c00;
            color: white;
        }
        
        .option.odd-option:hover {
            background: linear-gradient(135deg, #f57c00, #ef6c00);
            border-color: #ef6c00;
        }
        
        .option.even-option {
            background: linear-gradient(135deg, #9c27b0, #7b1fa2);
            border-color: #7b1fa2;
            color: white;
        }
        
        .option.even-option:hover {
            background: linear-gradient(135deg, #7b1fa2, #6a1b9a);
            border-color: #6a1b9a;
        }
        
        /* 當選中時保持原有的藍色樣式，但增加陰影效果 */
        .option.big-option.selected,
        .option.small-option.selected,
        .option.odd-option.selected,
        .option.even-option.selected {
            background: linear-gradient(135deg, #007bff, #0056b3);
            border-color: #0056b3;
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(0, 123, 255, 0.5);
        }
        
        /* 響應式設計 */
        @media (max-width: 768px) {
            .navbar-container {
                display: flex !important;
                justify-content: space-between !important;
                align-items: center !important;
                gap: 10px;
                padding: 8px 15px;
            }
            
            .navbar-brand {
                flex: 0 0 auto;
            }
            
            .brand-title {
                font-size: 16px;
            }
            
            .navbar-actions {
                flex: 0 0 auto;
                justify-content: flex-end;
                margin-left: auto !important;
            }
            
            .balance-info {
                font-size: 14px !important;
                padding: 6px 12px !important;
            }
            
            .menu-btn {
                padding: 8px !important;
                width: 40px;
                height: 40px;
            }
            
            .login-section {
                flex: 0 0 auto;
            }
            
            .login-form {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .dropdown-panel {
                right: 0 !important;
                left: auto !important;
                transform: none !important;
            }
            
            /* 投注選項響應式設計 */
            .betting-tabs {
                margin: 15px 10px;
                border-radius: 12px;
            }
            
            .tabs {
                flex-wrap: nowrap;
                justify-content: flex-start;
            }
            
            .tab {
                padding: 12px 8px;
                font-size: 12px;
                min-width: 80px;
                flex: 0 0 auto;
            }
            
            .tab-content {
                padding: 15px;
            }
            
            .betting-group {
                margin-bottom: 20px;
                padding: 15px;
            }
            
            .group-title {
                font-size: 14px;
                margin-bottom: 12px;
            }
            
            .betting-options {
                grid-template-columns: repeat(2, 1fr);
                gap: 10px;
            }
            
            .betting-options.numbers {
                grid-template-columns: repeat(5, 1fr);
                gap: 6px;
            }
            
            .betting-options.sum-values {
                grid-template-columns: repeat(4, 1fr);
                gap: 5px;
            }
            
            .option {
                padding: 10px 6px;
                min-height: 50px;
                font-size: 13px;
            }
            
            .option span:first-child {
                font-size: 13px;
            }
            
            .option .odds {
                font-size: 10px;
                padding: 1px 4px;
            }
            
            .betting-options.numbers .option {
                min-height: 40px;
                padding: 6px 3px;
            }
            
            .betting-options.numbers .option span:first-child {
                font-size: 14px;
            }
            
                         .betting-options.numbers .option .odds {
                 font-size: 9px;
             }
             
             /* 下注區域響應式設計 */
             .compact-bet-bar {
                 padding: 10px 8px !important;
                 gap: 8px !important;
                 min-width: 0 !important;
             }
             
             .compact-center-group {
                 gap: 8px !important;
             }
             
             .compact-clear-btn {
                 min-width: 50px !important;
                 padding: 8px 12px !important;
                 font-size: 12px !important;
                 height: 36px !important;
             }
             
             .compact-bet-count {
                 font-size: 11px !important;
                 min-width: 0 !important;
                 flex-shrink: 1 !important;
             }
             
             .compact-repeat-btn {
                 min-width: 50px !important;
                 padding: 8px 12px !important;
                 font-size: 12px !important;
                 height: 36px !important;
             }
             
             .chips-toggle-btn {
                 min-width: 50px !important;
                 padding: 8px 12px !important;
                 font-size: 12px !important;
                 height: 36px !important;
             }
             
             .compact-amount-input {
                 margin-right: 6px !important;
             }
             
             .compact-amount-input input {
                 width: 60px !important;
                 padding: 8px 6px !important;
                 font-size: 12px !important;
                 height: 36px !important;
             }
             
             .compact-bet-btn {
                 min-width: 50px !important;
                 padding: 8px 12px !important;
                 font-size: 12px !important;
                 height: 36px !important;
             }
             
             .dropdown-arrow {
                 font-size: 10px !important;
             }
         }
        
        /* 個別投注金額輸入框樣式 */
        .amount-input-small {
            width: 60px;
            padding: 4px 6px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 12px;
            text-align: center;
        }
        
        .amount-input-small:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 3px rgba(76, 175, 80, 0.3);
        }
        
        .selected-bets-header {
            display: grid;
            grid-template-columns: 1.5fr 1.5fr 1fr 1fr 1.2fr;
            gap: 8px;
            padding: 8px 12px;
            background-color: #f5f5f5;
            font-weight: bold;
            font-size: 12px;
        }
        
        .selected-bet-item {
            display: grid;
            grid-template-columns: 1.5fr 1.5fr 1fr 1fr 1.2fr;
            gap: 8px;
            padding: 8px 12px;
            border-bottom: 1px solid #eee;
            align-items: center;
        }
        
        .selected-bet-amount {
            display: flex;
            justify-content: center;
        }
        
        .selected-bet-odds {
            color: #ff6b6b;
            font-weight: bold;
            text-align: center;
            font-size: 13px;
        }
        
        /* 快速下注區域樣式 - 移除重複定義，使用外部CSS */
        
        /* 現代化開獎結果區域樣式 */
        .modern-result-section {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            margin-block: 15px;  /* 🎯 只保留上下margin */
            margin-inline: 0;    /* 清除左右margin，讓賽果區寬度最大化 */
            border-radius: 16px;
            overflow: visible;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }

        .result-header {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .period-display {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .period-info-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .period-badges {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .period-badge {
            display: flex;
            align-items: center;
            gap: 6px;
            background: linear-gradient(45deg, #1a1a1a, #333333);
            color: #ffd700;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
            border: 2px solid #ffd700;
            font-size: 14px;
        }

        .period-badge.current {
            border-color: #ffd700;
            background: linear-gradient(45deg, #1a1a1a, #333333);
        }

        .period-badge.next {
            border-color: #4a90e2;
            color: #4a90e2;
            background: linear-gradient(45deg, #1a1a2a, #2a2a3a);
        }

        /* 🎮 控件容器 - 讓動畫按鈕和倒計時並排顯示 */
        .controls-container {
            display: flex;
            align-items: center;
            gap: 8px;
            justify-content: center;
            flex-wrap: nowrap;
        }

        .countdown-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 3px;
            padding: 6px 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            min-width: 80px;
        }

        .countdown-section.betting {
            border-color: rgba(76, 175, 80, 0.5);
            background: rgba(76, 175, 80, 0.1);
        }

        .countdown-section.drawing {
            border-color: rgba(255, 193, 7, 0.5);
            background: rgba(255, 193, 7, 0.1);
        }
        
        /* 🎬 獨立開獎動畫按鈕樣式 - 縮小尺寸與期號一致 */
        .draw-animation-btn-standalone {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            border: 2px solid rgba(255, 255, 255, 0.2);
            white-space: nowrap;
            min-width: 80px;
        }
        
        .draw-animation-btn-standalone:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 25px rgba(102, 126, 234, 0.5);
            border-color: rgba(255, 255, 255, 0.4);
        }
        
        .draw-animation-btn-standalone:disabled {
            background: linear-gradient(135deg, #ffd700 0%, #ff8c00 100%);
            cursor: not-allowed;
            animation: pulse 1.5s ease-in-out infinite;
        }

        /* 🎬 原開獎動畫按鈕樣式 (保留向後兼容) */
        .draw-animation-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
            margin-bottom: 5px;
        }
        
        .draw-animation-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }
        
        .draw-animation-btn:disabled {
            background: linear-gradient(135deg, #ffd700 0%, #ff8c00 100%);
            cursor: not-allowed;
            animation: pulse 1.5s ease-in-out infinite;
        }

        .countdown-label {
            font-size: 10px;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 600;
        }

        .countdown-time {
            font-size: 14px;
            font-weight: 900;
            color: #ff4757 !important;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }
        
        .countdown-inline {
            display: flex;
            align-items: center;
            gap: 5px;
            white-space: nowrap;
        }
        
        .countdown-inline .countdown-label {
            font-size: 10px;
            color: rgba(255, 255, 255, 0.9);
            font-weight: 600;
        }
        
        .countdown-inline .countdown-time {
            font-size: 14px;
            font-weight: 900;
            color: #ff4757 !important;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }

        .period-number {
            font-size: 14px;
            font-weight: 900;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }

        .period-label {
            font-size: 10px;
            font-weight: 700;
            opacity: 0.9;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 16px;
            border-radius: 20px;
            background: rgba(255, 255, 255, 0.15);
        }

        .status-indicator.betting {
            background: rgba(76, 175, 80, 0.2);
            border: 1px solid rgba(76, 175, 80, 0.3);
        }

        .status-indicator.drawing {
            background: rgba(255, 193, 7, 0.2);
            border: 1px solid rgba(255, 193, 7, 0.3);
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: currentColor;
            animation: pulse 2s infinite;
        }

        .status-text {
            font-size: 14px;
            font-weight: 600;
        }

        .results-display {
            padding-block: 25px;  /* 🎯 只保留上下padding */
            padding-inline: 0 !important;  /* 清除左右padding，讓10顆球有足夠空間 */
            overflow-x: auto;
        }

        .results-grid {
            display: grid !important;
            grid-template-columns: repeat(10, minmax(28px, 1fr)) !important;
            gap: 4px !important;
            min-width: 0 !important;   /* 強制以容器寬度為準 */
            max-width: 100% !important; 
            width: 100% !important;    /* （保險） */
            margin: 0 auto !important;
            overflow: visible !important;
            box-sizing: border-box !important;
        }

        /* 強制覆蓋任何可能的外部CSS衝突 */
        .results-display .results-grid {
            display: grid !important;
            grid-template-columns: repeat(10, minmax(28px, 1fr)) !important;
            min-width: 0 !important;
            width: 100% !important;
        }

        .result-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 6px;
        }

        .result-ball {
            width: 42px;
            height: 42px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 16px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            border: 3px solid rgba(255, 255, 255, 0.3);
            transition: transform 0.3s ease;
            position: relative;
            margin: 0 auto;
        }

        .result-ball:hover {
            transform: scale(1.1);
        }

        .result-ball::before {
            content: '';
            position: absolute;
            top: 15%;
            left: 25%;
            width: 30%;
            height: 30%;
            background: rgba(255, 255, 255, 0.4);
            border-radius: 50%;
            filter: blur(1px);
        }

        /* 🎨 球顏色 - 適用於新結構和歷史記錄 */
        .number-ball.color-1, .result-ball.color-1 {
            background: linear-gradient(135deg, #FFD700, #FFA500) !important;
            color: #2c3e50 !important;
        }
        .number-ball.color-2, .result-ball.color-2 {
            background: linear-gradient(135deg, #4A90E2, #357ABD) !important;
            color: white !important;
        }
        .number-ball.color-3, .result-ball.color-3 {
            background: linear-gradient(135deg, #8E8E93, #636366) !important;
            color: white !important;
        }
        .number-ball.color-4, .result-ball.color-4 {
            background: linear-gradient(135deg, #FF8C42, #FF6347) !important;
            color: white !important;
        }
        .number-ball.color-5, .result-ball.color-5 {
            background: linear-gradient(135deg, #00CED1, #20B2AA) !important;
            color: white !important;
        }
        .number-ball.color-6, .result-ball.color-6 {
            background: linear-gradient(135deg, #9966CC, #8A2BE2) !important;
            color: white !important;
        }
        .number-ball.color-7, .result-ball.color-7 {
            background: linear-gradient(135deg, #A8A8A8, #808080) !important;
            color: white !important;
        }
        .number-ball.color-8, .result-ball.color-8 {
            background: linear-gradient(135deg, #FF4757, #FF3838) !important;
            color: white !important;
        }
        .number-ball.color-9, .result-ball.color-9 {
            background: linear-gradient(135deg, #C44569, #B71540) !important;
            color: white !important;
        }
        .number-ball.color-10, .result-ball.color-10 {
            background: linear-gradient(135deg, #26de81, #20bf6b) !important;
            color: white !important;
        }

        /* 確保所有球號樣式的基本屬性一致 */
        .number-ball, .result-ball {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 12px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            margin: 0 2px;
        }

        .position-label {
            font-size: 16px !important;
            font-weight: 700;
            color: white;
            text-align: center;
            line-height: 1.2;
            min-height: 26px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 5px 7px;
            background: rgba(0, 0, 0, 0.6);
            border-radius: 6px;
            backdrop-filter: blur(5px);
            white-space: nowrap;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        /* 響應式設計 */
        @media (max-width: 1200px) {
            .results-grid, .results-display .results-grid {
                display: grid !important;
                grid-template-columns: repeat(10, minmax(28px, 1fr)) !important;
                gap: 3px !important;
                min-width: 0 !important;   /* 防止超寬 */
                width: 100% !important;
                max-width: 100% !important;
            }
            
            .result-ball {
                width: 40px;
                height: 40px;
                font-size: 15px;
            }
        }

        @media (max-width: 768px) {
            .modern-result-section {
                margin-block: 8px;  /* 🎯 只保留上下margin */
                margin-inline: 0;   /* 清除左右margin */
                border-radius: 12px;
            }
            
            .result-header {
                padding: 12px;
            }
            
            .period-info-row {
                display: flex !important;
                flex-direction: row !important;
                justify-content: space-between !important;
                align-items: center !important;
                gap: 6px;
                flex-wrap: nowrap !important;
            }
            
            .period-badges {
                flex: 1;
                justify-content: flex-start;
                gap: 6px;
                min-width: 0;
            }
            
            .period-badge {
                padding: 4px 8px;
                font-size: 10px;
                white-space: nowrap;
            }
            
            .period-number {
                font-size: 12px;
            }
            
            .period-label {
                font-size: 8px;
            }
            
            .controls-container {
                display: flex !important;
                align-items: center !important;
                gap: 4px !important;
                flex-shrink: 0 !important;
                flex-wrap: nowrap !important;
            }
            
            .draw-animation-btn-standalone {
                padding: 4px 6px !important;
                font-size: 10px !important;
                min-width: 60px !important;
                border-radius: 8px !important;
            }
            
            .countdown-section {
                flex: 0 0 auto;
                padding: 4px 6px;
                min-width: 70px;
                border-radius: 8px;
                white-space: nowrap;
            }
            
            .countdown-time {
                font-size: 11px;
            }
            
            .countdown-label {
                font-size: 8px;
            }
            
            .results-display {
                padding-block: 12px;  /* 🎯 只保留上下padding */
                padding-inline: 0 !important;  /* 清除左右padding */
                overflow-x: visible !important;  /* 確保不會切掉球 */
            }
            
            .results-grid, .results-display .results-grid {
                display: grid !important;
                grid-template-columns: repeat(10, minmax(28px, 1fr)) !important;
                gap: 1px !important;
                min-width: 0 !important;
                max-width: 100% !important;
                width: 100% !important;
                padding: 0 2px !important;
                overflow: visible !important;
            }
            
            .result-item {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 2px;
                min-width: 0 !important;
                width: 100% !important;
            }
            
            .result-ball {
                width: 28px;
                height: 28px;
                font-size: 12px;
                flex-shrink: 0;
            }
            
            .position-label {
                font-size: 10px !important;
                padding: 2px 3px;
                min-height: 16px;
                white-space: nowrap;
                text-align: center;
                width: 100%;
                box-sizing: border-box;
            }
        }

        @media (max-width: 480px) {
            .navbar-container {
                padding: 6px 10px;
                gap: 5px;
            }
            
            .brand-title {
                font-size: 14px;
            }
            
            .balance-info {
                font-size: 12px !important;
                padding: 4px 8px !important;
            }
            
            .menu-btn {
                width: 36px;
                height: 36px;
                padding: 6px !important;
            }
            
            .period-badges {
                gap: 4px;
            }
            
            .period-badge {
                padding: 3px 6px;
                font-size: 9px;
            }
            
            .period-number {
                font-size: 10px;
            }
            
            .period-label {
                font-size: 7px;
            }
            
            .countdown-section {
                min-width: 90px;
                padding: 3px 5px;
                white-space: nowrap;
            }
            
            .countdown-time {
                font-size: 9px;
            }
            
            .countdown-label {
                font-size: 7px;
            }
            
            .results-display {
                padding-block: 10px;  /* 🎯 只保留上下padding */
                padding-inline: 0 !important;  /* 清除左右padding */
            }
            
            .results-grid, .results-display .results-grid {
                display: grid !important;
                grid-template-columns: repeat(10, minmax(28px, 1fr)) !important;
                min-width: 0 !important;
                width: 100% !important;
                max-width: 100% !important;
                padding: 0 1px !important;
            }
            
            .result-item {
                min-width: 0 !important;
                width: 100% !important;
                gap: 1px;
            }
            
            .result-ball {
                width: 26px;
                height: 26px;
                font-size: 11px;
            }
            
            .position-label {
                font-size: 9px !important;
                padding: 1px 2px;
                min-height: 14px;
            }
            
            .compact-bet-bar {
                padding: 6px 8px;
                gap: 6px;
            }
            
            .compact-clear-btn {
                padding: 5px 8px;
                font-size: 11px;
            }
            
            .compact-bet-count {
                font-size: 11px;
            }
            
            .compact-repeat-btn {
                padding: 3px 6px;
                font-size: 10px;
            }
            
            .chips-toggle-btn {
                padding: 5px 8px;
                font-size: 11px;
            }
            
            .compact-amount-input {
                width: 50px;
                padding: 5px 6px;
                font-size: 11px;
            }
            
            .compact-bet-btn {
                padding: 5px 10px;
                font-size: 11px;
            }
        }
            
            .results-display {
                padding-block: 15px;  /* 🎯 只保留上下padding */
                padding-inline: 0 !important;  /* 清除左右padding */
            }
            
            .results-grid {
                grid-template-columns: repeat(10, minmax(28px, 1fr)) !important;
                gap: 3px;
                min-width: 0 !important;   /* 防止超寬 */
            }
            
            .result-item {
                gap: 6px;
            }
            
            .result-ball {
                width: 40px;
                height: 40px;
                font-size: 14px;
            }
            
            .position-label {
                font-size: 16px !important;
                min-height: 20px;
                padding: 4px 5px;
            }

        /* 新的簡潔下注區域樣式 */
        .compact-betting-actions {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
            border-top: 1px solid #e0e0e0;
            box-shadow: 0 -2px 8px rgba(0,0,0,0.1);
            z-index: 100;
        }
        
        .compact-betting-actions.disabled {
            background: #f5f5f5;
            opacity: 0.7;
        }

        .compact-bet-bar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 20px;
            gap: 15px;
            max-width: 1200px;
            margin: 0 auto;
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }
        
        .compact-center-group {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            flex: 1;
        }

        .compact-clear-btn {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 10px 20px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            min-width: 70px;
            height: 40px;
            flex-shrink: 0;
        }

        .compact-clear-btn:hover {
            background: #c82333;
        }

        .compact-middle-section {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .compact-bet-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .compact-bet-count {
            font-size: 14px;
            color: #333;
            font-weight: 500;
            white-space: nowrap;
        }

        .compact-repeat-btn {
            background: #17a2b8;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 10px 20px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            min-width: 70px;
            height: 40px;
            flex-shrink: 0;
        }

        .compact-repeat-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .compact-repeat-btn:hover:not(:disabled) {
            background: #138496;
        }

        .chips-container {
            position: relative;
            display: inline-block;
        }

        .chips-toggle-btn {
            background: #ffc107;
            color: #212529;
            border: none;
            border-radius: 6px;
            padding: 10px 20px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s ease;
            min-width: 70px;
            height: 40px;
            flex-shrink: 0;
        }

        .chips-toggle-btn:hover {
            background: #e0a800;
            transform: translateY(-1px);
        }

        .dropdown-arrow {
            font-size: 12px;
            transition: transform 0.2s ease;
        }

        .dropdown-arrow.open {
            transform: rotate(180deg);
        }

        .chips-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border: 2px solid #007bff;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            padding: 20px;
            z-index: 999999;
            min-width: 300px;
            opacity: 0;
            scale: 0.8;
            transition: all 0.3s ease;
            pointer-events: none;
        }

        .chips-popup.show {
            opacity: 1;
            scale: 1;
            pointer-events: auto;
        }

        .chips-popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.4);
            z-index: 999998;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        .chips-popup-overlay.show {
            opacity: 1;
            pointer-events: auto;
        }

        .chips-header {
            text-align: center;
            margin-bottom: 16px;
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }

        .chips-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 12px;
            margin-bottom: 16px;
        }

        .compact-chip {
            background: #f8f9fa;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            padding: 12px 16px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            text-align: center;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 50px;
        }

        .compact-chip.active {
            background: #007bff;
            color: white;
            border-color: #007bff;
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(0,123,255,0.3);
        }

        .compact-chip:hover {
            background: #e9ecef;
            border-color: #007bff;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .compact-chip.active:hover {
            background: #0056b3;
            border-color: #0056b3;
            transform: scale(1.05) translateY(-2px);
        }

        .chips-close-btn {
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 8px 16px;
            font-size: 14px;
            cursor: pointer;
            width: 100%;
        }

        .chips-close-btn:hover {
            background: #5a6268;
        }

        .compact-amount-input {
            margin-right: 15px;
            flex-shrink: 0;
        }
        
        .compact-amount-input input {
            width: 80px;
            padding: 10px 12px;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            text-align: center;
            font-weight: 500;
            height: 40px;
            box-sizing: border-box;
        }

        .compact-amount-input input:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
        }

        .compact-bet-btn {
            background: #28a745;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 10px 20px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            min-width: 70px;
            height: 40px;
            flex-shrink: 0;
        }

        .compact-bet-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .compact-bet-btn:hover:not(:disabled) {
            background: #218838;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(40,167,69,0.3);
        }

        /* 歷史開獎搜尋樣式 */
        .history-search {
            padding: 15px;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }

        .search-row {
            display: flex;
            gap: 15px;
            align-items: end;
            flex-wrap: wrap;
        }

        .search-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .search-item label {
            font-size: 14px;
            font-weight: 500;
            color: #495057;
        }

        .search-item input {
            padding: 8px 12px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            font-size: 14px;
            min-width: 120px;
        }

        .search-item input:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.1);
        }

        .search-actions {
            display: flex;
            gap: 8px;
        }

        .search-btn, .clear-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .search-btn {
            background: #007bff;
            color: white;
        }

        .search-btn:hover {
            background: #0056b3;
        }

        .clear-btn {
            background: #6c757d;
            color: white;
        }

        .clear-btn:hover {
            background: #545b62;
        }

        @media (max-width: 768px) {
            .search-row {
                flex-direction: column;
                align-items: stretch;
            }
            
            .search-actions {
                justify-content: center;
            }
        }

        /* 下注確認彈窗樣式 */
        .bet-confirmation {
            background: white;
            border-radius: 8px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }

        .bet-confirm-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px 20px;
            border-bottom: 1px solid #eee;
            background: #47824A;
            color: white;
            border-radius: 8px 8px 0 0;
        }

        .bet-confirm-header h3 {
            margin: 0;
            font-size: 18px;
        }

        .bet-confirm-summary {
            padding: 12px 20px;
            background: #f8f9fa;
            border-bottom: 1px solid #eee;
        }

        .total-info {
            font-weight: bold;
            color: #333;
        }

        .bet-confirm-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .bet-confirm-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 20px;
            border-bottom: 1px solid #f0f0f0;
        }

        .bet-confirm-info {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .bet-type {
            font-weight: 500;
            color: #333;
        }

        .bet-odds {
            color: #dc3545;
            font-weight: bold;
        }

        .bet-multiply {
            color: #666;
        }

        .remove-bet-btn {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .bet-confirm-options {
            padding: 12px 20px;
            border-bottom: 1px solid #eee;
        }

        .auto-accept-checkbox {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
        }

        .help-icon {
            background: #6c757d;
            color: white;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
        }

        .bet-confirm-actions {
            display: flex;
            gap: 12px;
            padding: 16px 20px;
        }

        .cancel-bet-btn {
            flex: 1;
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 10px;
            cursor: pointer;
        }

        .confirm-bet-btn {
            flex: 1;
            background: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 10px;
            cursor: pointer;
            font-weight: bold;
        }

        .cancel-bet-btn:hover {
            background: #5a6268;
        }

        .confirm-bet-btn:hover {
            background: #218838;
        }

        /* 響應式設計 */
        @media (max-width: 768px) {
            .compact-bet-bar {
                display: flex !important;
                flex-direction: row !important;
                flex-wrap: nowrap !important;
                padding: 8px 10px;
                gap: 8px;
                justify-content: space-between;
                align-items: center;
            }
            
            .compact-clear-btn {
                flex: 0 0 auto;
                padding: 6px 10px;
                font-size: 12px;
            }
            
            .compact-middle-section {
                flex: 1;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
                flex-wrap: nowrap;
            }
            
            .compact-bet-info {
                flex: 0 0 auto;
                gap: 5px;
            }
            
            .compact-bet-count {
                font-size: 12px;
            }
            
            .compact-repeat-btn {
                padding: 4px 8px;
                font-size: 11px;
            }
            
            .chips-container {
                flex: 0 0 auto;
                position: relative;
            }
            
            .chips-toggle-btn {
                padding: 6px 10px;
                font-size: 12px;
            }
            
            .chips-popup {
                min-width: 280px;
                max-width: 90vw;
            }
            
            .chips-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 8px;
            }
            
            .compact-chip {
                padding: 8px 12px;
                font-size: 14px;
                min-height: 40px;
            }
            
            .compact-amount-input {
                flex: 0 0 auto;
                width: 60px;
                padding: 6px 8px;
                font-size: 12px;
            }
            
            .compact-bet-btn {
                flex: 0 0 auto;
                padding: 6px 12px;
                font-size: 12px;
            }
        }
        
        /* 超小螢幕額外優化 */
        @media (max-width: 360px) {
            .result-item {
                min-width: 0 !important;
                width: 100% !important;
            }
            
            .result-ball {
                width: 22px;
                height: 22px;
                font-size: 9px;
            }
            
            .position-label {
                font-size: 8px !important;
                padding: 1px;
                min-height: 12px;
            }
            
            .results-display {
                padding-block: 8px;  /* 🎯 只保留上下padding */
                padding-inline: 0 !important;  /* 清除左右padding */
            }
            
            .results-grid {
                gap: 1px;
            }
            
            .countdown-time {
                font-size: 9px;
            }
            
            .countdown-label {
                font-size: 7px;
            }
            
            .period-number {
                font-size: 9px;
            }
            
            .period-label {
                font-size: 6px;
            }
        }

        /* Modal 彈窗樣式 */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(5px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            padding: 20px;
            box-sizing: border-box;
        }
        
        .modal > div {
            background: white;
            border-radius: 12px;
            max-width: 90vw;
            max-height: 85vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s ease-out;
            position: relative;
        }
        
        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: scale(0.9) translateY(-20px);
            }
            to {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }
        
        /* 投注記錄彈窗樣式 */
        .bet-records,
        .profit-records,
        .day-detail,
        .draw-history,
        .login-modal,
        .register-modal {
            width: 100%;
            max-width: 600px;
            min-width: 320px;
        }
        
        /* 彈窗標題區域 */
        .record-header,
        .profit-header,
        .detail-header,
        .history-header,
        .login-header,
        .register-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 20px 24px;
            border-bottom: 2px solid #f0f2f5;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 12px 12px 0 0;
        }
        
        .record-header .title,
        .profit-header .title,
        .detail-header .title,
        .history-header .title,
        .login-header h3,
        .register-header h3 {
            font-size: 18px;
            font-weight: 600;
            margin: 0;
        }
        
        .close-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            font-size: 24px;
            font-weight: bold;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }
        
        .close-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }
        
        /* 標籤頁樣式 */
        .record-tabs,
        .time-range-tabs {
            display: flex;
            background: #f8f9fa;
            margin: 0;
            border-bottom: 1px solid #e9ecef;
        }
        
        .record-tabs .tab,
        .time-range-tabs .tab {
            flex: 1;
            padding: 15px 20px;
            text-align: center;
            background: transparent;
            border: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #6c757d;
            transition: all 0.2s ease;
            border-bottom: 3px solid transparent;
        }
        
        .record-tabs .tab:hover,
        .time-range-tabs .tab:hover {
            background: #e9ecef;
            color: #495057;
        }
        
        .record-tabs .tab.active,
        .time-range-tabs .tab.active {
            background: white;
            color: #007bff;
            border-bottom-color: #007bff;
            font-weight: 600;
        }
        
        /* 記錄列表樣式 */
        .record-list,
        .profit-list,
        .history-list {
            max-height: 50vh;
            overflow-y: auto;
            padding: 0;
        }
        
        .record-item,
        .profit-item,
        .history-item {
            padding: 16px 20px;
            border-bottom: 1px solid #f0f2f5;
            transition: background-color 0.2s ease;
            cursor: pointer;
        }
        
        .record-item:hover,
        .profit-item:hover,
        .history-item:hover {
            background: #f8f9fa;
        }
        
        .record-item:last-child,
        .profit-item:last-child,
        .history-item:last-child {
            border-bottom: none;
        }
        
        .no-records {
            text-align: center;
            padding: 40px 20px;
            color: #6c757d;
            font-size: 14px;
        }
        
        /* 響應式設計 */
        @media (max-width: 768px) {
            .modal {
                padding: 10px;
            }
            
            .modal > div {
                max-width: 100%;
                max-height: 90vh;
            }
            
            .bet-records,
            .profit-records,
            .day-detail,
            .draw-history,
            .login-modal,
            .register-modal {
                min-width: auto;
            }
            
            .record-header,
            .profit-header,
            .detail-header,
            .history-header,
            .login-header,
            .register-header {
                padding: 15px 20px;
            }
            
            .record-header .title,
            .profit-header .title,
            .detail-header .title,
            .history-header .title,
            .login-header h3,
            .register-header h3 {
                font-size: 16px;
            }
            
            .record-list,
            .profit-list,
            .history-list {
                max-height: 60vh;
            }
        }

        /* 🎯 彈出式通知視窗樣式 */
        .notification-popup {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            animation: fadeIn 0.3s ease-out;
        }

        .notification-content {
            background: white;
            border-radius: 15px;
            padding: 25px 30px;
            max-width: 400px;
            min-width: 300px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            gap: 15px;
            position: relative;
            animation: slideIn 0.3s ease-out;
        }

        .notification-icon {
            font-size: 24px;
            flex-shrink: 0;
        }

        .notification-message {
            flex: 1;
            font-size: 16px;
            font-weight: 500;
            color: #333;
            line-height: 1.4;
        }

        .notification-close {
            position: absolute;
            top: 8px;
            right: 12px;
            background: none;
            border: none;
            font-size: 18px;
            color: #999;
            cursor: pointer;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .notification-close:hover {
            background: #f0f0f0;
            color: #666;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: scale(0.8) translateY(-20px);
            }
            to {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }
    </style>
</head>
<body>
    <!-- 遊戲主容器 -->
    <div id="app" class="container">
        <!-- 頂部導航欄 -->
        <header class="modern-navbar">
            <div class="navbar-container">
                <!-- 左側：Logo和標題 -->
                <div class="navbar-brand">
                    <h1 class="brand-title">極速賽車</h1>
                </div>
                
                <!-- 中間：用戶信息 -->
                <!-- User info section is removed from here -->
                
                <!-- 右側：功能按鈕 -->
                <div class="navbar-actions" style="margin-left: auto; display: flex; align-items: center; gap: 15px;">
                     <!-- Balance display -->
                    <div class="balance-info" style="color: white; background: rgba(255, 255, 255, 0.15); padding: 8px 15px; border-radius: 20px;">
                        <span style="font-weight: 700;">{{ formatMoney(balance) }}</span>
                    </div>
                    <!-- Hamburger menu -->
                    <div class="menu-dropdown" ref="menuContainer">
                        <button class="action-btn menu-btn" @click="toggleDropdown">
                            <i class="fas fa-bars" style="font-size: 18px;"></i>
                        </button>
                        <div class="dropdown-panel" v-show="showDropdownMenu" style="right: 0;">
                            <!-- User info moved inside dropdown -->
                            <div class="user-section-dropdown" style="padding: 16px; border-bottom: 1px solid #eee;">
                                <div style="display: flex; align-items: center; gap: 15px;">
                                    <div class="user-avatar" style="background: linear-gradient(45deg, #ff6b6b, #ee5a24); color: white; width: 45px; height: 45px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 18px;">
                                        <span>{{ username.charAt(0).toUpperCase() }}</span>
                                    </div>
                                    <div class="user-details">
                                        <div class="username" style="color: #333; font-weight: 500;">{{ username }}</div>
                                        <div class="daily-profit" :class="{ 'profit-positive': dailyProfit > 0, 'profit-negative': dailyProfit < 0, 'profit-zero': dailyProfit === 0 }" style="font-size: 12px;">
                                            今日盈虧: {{ formatProfit(dailyProfit) }}
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <button class="dropdown-action" @click="showDrawHistory">
                                <span>歷史開獎</span>
                            </button>
                            <button class="dropdown-action" @click="showBetRecords">
                                <span>注單記錄</span>
                            </button>
                            <button class="dropdown-action" @click="showProfitRecords">
                                <span>盈虧記錄</span>
                            </button>

                            <div class="dropdown-divider"></div>

                            <div class="hot-bets-section" v-if="hotBets && hotBets.length > 0">
                                <div class="section-title">🔥 熱門投注</div>
                                <div class="hot-bet-list">
                                    <div
                                        v-for="(bet, index) in hotBets.slice(0, 5)"
                                        :key="index"
                                        class="hot-bet-option"
                                        @click="selectHotBet(bet)"
                                    >
                                        <span class="bet-label">{{ bet.label }}</span>
                                        <span class="hot-indicator">HOT</span>
                                    </div>
                                </div>
                            </div>
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-action" @click="showGameRules">
                                <span>規則說明</span>
                            </button>
                            <button class="dropdown-action" @click="logout">
                                <span>登出</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        


        <!-- 開獎結果區域 -->
        <div class="modern-result-section">
            <div class="result-header">
                <div class="period-display">
                    <div class="period-info-row">
                        <div class="period-badges">
                            <div class="period-badge current">
                                <span class="period-number">{{ formattedCurrentPeriod }}</span>
                                <span class="period-label">期 (當前)</span>
                            </div>

                        </div>
                        <div class="controls-container">
                            <button class="draw-animation-btn-standalone" @click="toggleAnimation">
                                {{ gameStatus === 'betting' ? '賽車動畫' : '播放賽車' }}
                            </button>
                            <div class="countdown-section" :class="gameStatus">
                                <div class="countdown-inline">
                                    <span class="countdown-label">{{ gameStatus === 'betting' ? '封盤倒計時' : '開獎中...' }}</span>
                                    <span class="countdown-time" v-if="gameStatus === 'betting'">{{ formatTime(countdownSeconds) }}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            
            <div class="results-display-new">
                <div class="results-container-new">
                    <div v-for="(number, index) in lastResults" :key="index" 
                         class="result-slot-new">
                        <div :class="['number-ball', `color-${number}`]">
                            {{ number }}
                        </div>
                        <div class="position-label-new">{{ getPositionName(index + 1) }}</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 投注選項區域 -->
        <section class="betting-tabs" :class="{ disabled: gameStatus !== 'betting' }">
            <div class="tabs">
                <div class="tab" :class="{ active: activeTab === 'combined' }" @click="activeTab = 'combined'">兩面</div>
                <div class="tab" :class="{ active: activeTab === 'quick' }" @click="activeTab = 'quick'">快速</div>
                <div class="tab" :class="{ active: activeTab === 'number1to5' }" @click="activeTab = 'number1to5'">單號1~5</div>
                <div class="tab" :class="{ active: activeTab === 'number6to10' }" @click="activeTab = 'number6to10'">單號6~10</div>
                <div class="tab" :class="{ active: activeTab === 'dragonTiger' }" @click="activeTab = 'dragonTiger'">冠亞和</div>
            </div>
            
            <!-- 兩面玩法區域 -->
            <div class="tab-content" v-if="activeTab === 'combined'">
                
                <div class="betting-group">
                    <div class="group-title">冠軍</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('champion', 'big') }" @click="selectBet('champion', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.champion.big) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('champion', 'small') }" @click="selectBet('champion', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.champion.small) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('champion', 'odd') }" @click="selectBet('champion', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.champion.odd) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('champion', 'even') }" @click="selectBet('champion', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.champion.even) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">亞軍</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('runnerup', 'big') }" @click="selectBet('runnerup', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.runnerup.big) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('runnerup', 'small') }" @click="selectBet('runnerup', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.runnerup.small) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('runnerup', 'odd') }" @click="selectBet('runnerup', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.runnerup.odd) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('runnerup', 'even') }" @click="selectBet('runnerup', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.runnerup.even) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">第三名</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('third', 'big') }" @click="selectBet('third', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.third ? odds.third.big : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('third', 'small') }" @click="selectBet('third', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.third ? odds.third.small : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('third', 'odd') }" @click="selectBet('third', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.third ? odds.third.odd : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('third', 'even') }" @click="selectBet('third', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.third ? odds.third.even : 1.9) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">第四名</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('fourth', 'big') }" @click="selectBet('fourth', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.fourth ? odds.fourth.big : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('fourth', 'small') }" @click="selectBet('fourth', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.fourth ? odds.fourth.small : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('fourth', 'odd') }" @click="selectBet('fourth', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.fourth ? odds.fourth.odd : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('fourth', 'even') }" @click="selectBet('fourth', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.fourth ? odds.fourth.even : 1.9) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">第五名</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('fifth', 'big') }" @click="selectBet('fifth', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.fifth ? odds.fifth.big : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('fifth', 'small') }" @click="selectBet('fifth', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.fifth ? odds.fifth.small : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('fifth', 'odd') }" @click="selectBet('fifth', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.fifth ? odds.fifth.odd : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('fifth', 'even') }" @click="selectBet('fifth', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.fifth ? odds.fifth.even : 1.9) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">第六名</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('sixth', 'big') }" @click="selectBet('sixth', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.sixth ? odds.sixth.big : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('sixth', 'small') }" @click="selectBet('sixth', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.sixth ? odds.sixth.small : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('sixth', 'odd') }" @click="selectBet('sixth', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.sixth ? odds.sixth.odd : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('sixth', 'even') }" @click="selectBet('sixth', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.sixth ? odds.sixth.even : 1.9) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">第七名</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('seventh', 'big') }" @click="selectBet('seventh', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.seventh ? odds.seventh.big : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('seventh', 'small') }" @click="selectBet('seventh', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.seventh ? odds.seventh.small : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('seventh', 'odd') }" @click="selectBet('seventh', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.seventh ? odds.seventh.odd : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('seventh', 'even') }" @click="selectBet('seventh', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.seventh ? odds.seventh.even : 1.9) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">第八名</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('eighth', 'big') }" @click="selectBet('eighth', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.eighth ? odds.eighth.big : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('eighth', 'small') }" @click="selectBet('eighth', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.eighth ? odds.eighth.small : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('eighth', 'odd') }" @click="selectBet('eighth', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.eighth ? odds.eighth.odd : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('eighth', 'even') }" @click="selectBet('eighth', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.eighth ? odds.eighth.even : 1.9) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">第九名</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('ninth', 'big') }" @click="selectBet('ninth', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.ninth ? odds.ninth.big : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('ninth', 'small') }" @click="selectBet('ninth', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.ninth ? odds.ninth.small : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('ninth', 'odd') }" @click="selectBet('ninth', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.ninth ? odds.ninth.odd : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('ninth', 'even') }" @click="selectBet('ninth', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.ninth ? odds.ninth.even : 1.9) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">第十名</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('tenth', 'big') }" @click="selectBet('tenth', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.tenth ? odds.tenth.big : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('tenth', 'small') }" @click="selectBet('tenth', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.tenth ? odds.tenth.small : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('tenth', 'odd') }" @click="selectBet('tenth', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.tenth ? odds.tenth.odd : 1.9) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('tenth', 'even') }" @click="selectBet('tenth', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.tenth ? odds.tenth.even : 1.9) }}</span>
                        </div>
                    </div>
                </div>
                        </div>
            
            <!-- 快速投注區域 -->
            <div class="tab-content" v-if="activeTab === 'quick'">
                <div class="position-selector">
                    <div class="group-title">選擇位置 (可多選)</div>
                    <div class="position-tabs">
                        <div 
                            v-for="position in positions" 
                            :key="position.value" 
                            class="position-tab" 
                            :class="{ active: selectedPositions.includes(position.value) }"
                            @click="togglePosition(position.value)"
                        >
                            {{ position.label }}
                        </div>
                    </div>
                    <div class="position-controls" v-if="selectedPositions.length > 0">
                        <span class="selected-count">已選 {{ selectedPositions.length }} 個位置</span>
                        <button class="clear-positions" @click="clearPositions">清除位置</button>
                    </div>
                </div>
                
                <div class="betting-group" v-if="selectedPositions.length > 0">
                    <div class="group-title">選擇號碼 ({{ getSelectedPositionsLabel() }})</div>
                    <div class="betting-options numbers">
                        <div 
                            v-for="num in 10" 
                            :key="num" 
                            class="option ball-option" 
                            :class="{ selected: isAnyPositionNumberSelected(num) }"
                            @click="selectMultiPositionNumber(num)"
                        >
                            <span class="number">{{ num }}</span>
                            <span class="odds">{{ formatOdds(odds.number['first']) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group" v-if="selectedPositions.length > 0">
                    <div class="group-title">快速選項 ({{ getSelectedPositionsLabel() }})</div>
                    <div class="betting-options properties">
                        <div 
                            class="option property-option" 
                            :class="{ selected: isAnyPositionPropertySelected('big') }"
                            @click="selectMultiPositionProperty('big')"
                        >
                            <span>大</span>
                            <span class="odds">{{ formatOdds(1.96) }}</span>
                        </div>
                        <div 
                            class="option property-option" 
                            :class="{ selected: isAnyPositionPropertySelected('small') }"
                            @click="selectMultiPositionProperty('small')"
                        >
                            <span>小</span>
                            <span class="odds">{{ formatOdds(1.96) }}</span>
                        </div>
                        <div 
                            class="option property-option" 
                            :class="{ selected: isAnyPositionPropertySelected('odd') }"
                            @click="selectMultiPositionProperty('odd')"
                        >
                            <span>單</span>
                            <span class="odds">{{ formatOdds(1.96) }}</span>
                        </div>
                        <div 
                            class="option property-option" 
                            :class="{ selected: isAnyPositionPropertySelected('even') }"
                            @click="selectMultiPositionProperty('even')"
                        >
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(1.96) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="no-position-hint" v-if="selectedPositions.length === 0">
                    <p>請先選擇位置 (可選擇多個位置)</p>
                </div>
            </div>
            
            <!-- 冠亞和值區域 -->
            <div class="tab-content" v-if="activeTab === 'dragonTiger'">
                <div class="betting-group">
                    <div class="group-title">冠亞和大小單雙</div>
                    <div class="betting-options">
                        <div class="option" 
                             :class="{ 
                                 selected: isSelected('sumValue', 'big'),
                                 hot: isHotBet('sumValue', 'big')
                             }" 
                             @click="selectBet('sumValue', 'big')">
                            <span>大</span>
                            <span class="odds">{{ formatOdds(odds.sumValue.big) }}</span>
                        </div>
                        <div class="option" 
                             :class="{ 
                                 selected: isSelected('sumValue', 'small'),
                                 hot: isHotBet('sumValue', 'small')
                             }" 
                             @click="selectBet('sumValue', 'small')">
                            <span>小</span>
                            <span class="odds">{{ formatOdds(odds.sumValue.small) }}</span>
                        </div>
                        <div class="option" 
                             :class="{ 
                                 selected: isSelected('sumValue', 'odd'),
                                 hot: isHotBet('sumValue', 'odd')
                             }" 
                             @click="selectBet('sumValue', 'odd')">
                            <span>單</span>
                            <span class="odds">{{ formatOdds(odds.sumValue.odd) }}</span>
                        </div>
                        <div class="option" 
                             :class="{ 
                                 selected: isSelected('sumValue', 'even'),
                                 hot: isHotBet('sumValue', 'even')
                             }" 
                             @click="selectBet('sumValue', 'even')">
                            <span>雙</span>
                            <span class="odds">{{ formatOdds(odds.sumValue.even) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">冠亞和值</div>
                    <div class="betting-options sum-values">
                        <div class="option" v-for="num in 17" :key="num+2" 
                             :class="{ selected: isSelected('sumValue', String(num+2)) }"
                             @click="selectBet('sumValue', String(num+2))">
                            <span class="sum-value-number">{{ num + 2 }}</span>
                            <span class="odds">{{ formatOdds(getSumValueOdds(num+2)) }}</span>
                        </div>
                    </div>
                </div>
                
                <div class="betting-group">
                    <div class="group-title">龍虎</div>
                    <div class="betting-options">
                        <div class="option" :class="{ selected: isSelected('dragonTiger', 'dragon') }"
                             @click="selectBet('dragonTiger', 'dragon')">
                            <span>龍</span>
                            <span class="odds">{{ formatOdds(odds.dragonTiger.dragon) }}</span>
                        </div>
                        <div class="option" :class="{ selected: isSelected('dragonTiger', 'tiger') }"
                             @click="selectBet('dragonTiger', 'tiger')">
                            <span>虎</span>
                            <span class="odds">{{ formatOdds(odds.dragonTiger.tiger) }}</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- 單號1-5區域 -->
            <div class="tab-content" v-if="activeTab === 'number1to5'">
                <div v-for="position in 5" :key="position" class="betting-group">
                    <div class="group-title">第{{ position }}名</div>
                    <div class="betting-options numbers">
                        <div v-for="num in 10" :key="num" class="option" 
                             :class="{ selected: isSelected('number', String(num), position) }"
                             @click="selectBet('number', String(num), position)">
                            <span>{{ num }}</span>
                            <span class="odds">{{ formatOdds(odds.number['first']) }}</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- 單號6-10區域 -->
            <div class="tab-content" v-if="activeTab === 'number6to10'">
                <div v-for="position in 5" :key="position+5" class="betting-group">
                    <div class="group-title">第{{ position + 5 }}名</div>
                    <div class="betting-options numbers">
                        <div v-for="num in 10" :key="num" class="option" 
                             :class="{ selected: isSelected('number', String(num), position + 5) }"
                             @click="selectBet('number', String(num), position + 5)">
                            <span>{{ num }}</span>
                            <span class="odds">{{ formatOdds(odds.number['first']) }}</span>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- 新的簡潔下注區域 -->
        <section class="compact-betting-actions" :class="{ disabled: gameStatus !== 'betting' }">
            <div class="compact-bet-bar">
                <!-- 左側：清除按鈕 -->
                <button class="compact-clear-btn" @click="clearBets">清除</button>
                
                <!-- 中間容器：居中顯示 -->
                <div class="compact-center-group">
                    <!-- 已選注數和續押 -->
                    <div class="compact-bet-info">
                        <span class="compact-bet-count">已選：{{ selectedBets.length }}注</span>
                        <button class="compact-repeat-btn" @click="repeatLastBets" :disabled="!hasLastBets">續押</button>
                    </div>
                    
                    <!-- 籌碼按鈕（彈窗模式） -->
                    <div class="chips-container">
                        <button class="chips-toggle-btn" @click="showChips = !showChips">
                            籌碼 <span class="dropdown-arrow" :class="{ open: showChips }">▼</span>
                        </button>
                    </div>
                    
                    <!-- 金額輸入框 -->
                    <div class="compact-amount-input">
                        <input type="number" v-model="betAmount" min="1" step="1" placeholder="金額">
                    </div>
                </div>
                
                <!-- 右側：下注按鈕 -->
                <button class="compact-bet-btn" @click="showBetConfirmation" :disabled="!selectedBets.length || !betAmount || betAmount <= 0 || gameStatus !== 'betting'">
                    {{ gameStatus === 'betting' ? '下注' : '已封盤' }}
                </button>
            </div>
        </section>

        <!-- 籌碼選擇彈窗 -->
        <div class="chips-popup-overlay" :class="{ show: showChips }" @click="showChips = false"></div>
        <div class="chips-popup" :class="{ show: showChips }">
            <div class="chips-header">選擇籌碼金額</div>
            <div class="chips-grid">
                <div class="compact-chip" :class="{ active: betAmount === 5 }" @click="setBetAmount(5); showChips = false">5</div>
                <div class="compact-chip" :class="{ active: betAmount === 10 }" @click="setBetAmount(10); showChips = false">10</div>
                <div class="compact-chip" :class="{ active: betAmount === 50 }" @click="setBetAmount(50); showChips = false">50</div>
                <div class="compact-chip" :class="{ active: betAmount === 100 }" @click="setBetAmount(100); showChips = false">100</div>
                <div class="compact-chip" :class="{ active: betAmount === 500 }" @click="setBetAmount(500); showChips = false">500</div>
                <div class="compact-chip" :class="{ active: betAmount === 1000 }" @click="setBetAmount(1000); showChips = false">1000</div>
            </div>
            <button class="chips-close-btn" @click="showChips = false">關閉</button>
        </div>

        <!-- 下注確認彈窗 -->
        <div class="modal" v-if="showBetModal">
            <div class="bet-confirmation">
                <div class="bet-confirm-header">
                    <h3>下注清單</h3>
                    <button class="close-btn" @click="showBetModal = false">×</button>
                </div>
                
                <div class="bet-confirm-summary">
                    <span class="total-info">共計：{{ formatMoney(calculateTotalBetAmount()) }}/{{ selectedBets.length }}注，您確定下注嗎？</span>
                </div>
                
                <div class="bet-confirm-list">
                    <div v-for="(bet, index) in selectedBets" :key="index" class="bet-confirm-item">
                        <div class="bet-confirm-info">
                            <span class="bet-type">{{ getBetTypeLabel(bet) }} {{ getBetValueLabel(bet) }}</span>
                            <span class="bet-odds">@{{ formatOdds(getBetOdds(bet)) }}</span>
                            <span class="bet-multiply">× {{ bet.amount }}</span>
                        </div>
                        <button class="remove-bet-btn" @click="removeBetFromConfirm(index)">×</button>
                    </div>
                </div>
                
                <div class="bet-confirm-options">
                    <label class="auto-accept-checkbox">
                        <input type="checkbox" v-model="autoAcceptBetterOdds">
                        <span>自動接受更好賠率</span>
                        <span class="help-icon">?</span>
                    </label>
                </div>
                
                <div class="bet-confirm-actions">
                    <button class="cancel-bet-btn" @click="showBetModal = false">取消</button>
                    <button class="confirm-bet-btn" @click="confirmBets" :disabled="gameStatus !== 'betting'">
                        {{ gameStatus === 'betting' ? '確認' : '已封盤' }}
                    </button>
                </div>
            </div>
        </div>
        
        <!-- 派彩記錄彈窗 -->
        <div class="modal" v-if="showRecords">
            <bet-records 
                :records="betRecords" 
                @close="showRecords = false"
            ></bet-records>
        </div>

        <!-- 盈虧記錄彈窗 -->
        <div class="modal" v-if="showProfitModal">
            <div class="profit-records">
                <div class="profit-header">
                    <div class="title">盈虧記錄</div>
                    <button class="close-btn" @click="showProfitModal = false">×</button>
                </div>
                
                <!-- 時間範圍選擇 -->
                <div class="time-range-tabs">
                    <div class="tab" :class="{ active: profitTimeRange === 'thisWeek' }" @click="switchProfitRange('thisWeek')">本週</div>
                    <div class="tab" :class="{ active: profitTimeRange === 'lastWeek' }" @click="switchProfitRange('lastWeek')">上週</div>
                </div>
                
                <!-- 盈虧記錄列表 -->
                <div class="profit-list">
                    <div v-if="profitRecords.length === 0" class="no-records">
                        暫無盈虧記錄
                    </div>
                    <div v-for="(record, index) in profitRecords" :key="`profit-${record.date}-${index}`" class="profit-item" @click="showDayDetail(record.date)">
                        <div class="profit-date">
                            <div class="date">{{ formatDate(record.date) }}</div>
                            <div class="weekday">{{ getWeekday(record.date) }}</div>
                        </div>
                        <div class="profit-stats">
                            <div class="bet-count">{{ record.betCount }}注</div>
                            <div class="profit-amount" :class="{ 
                                'profit-positive': record.profit > 0, 
                                'profit-negative': record.profit < 0,
                                'profit-zero': record.profit === 0 
                            }">
                                {{ formatProfit(record.profit) }}
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- 總計統計 -->
                <div class="profit-summary">
                    <div class="summary-item">
                        <span class="label">總注數:</span>
                        <span class="value">{{ totalBetCount }}注</span>
                    </div>
                    <div class="summary-item">
                        <span class="label">總盈虧:</span>
                        <span class="value" :class="{ 
                            'profit-positive': totalProfit > 0, 
                            'profit-negative': totalProfit < 0,
                            'profit-zero': totalProfit === 0 
                        }">{{ formatProfit(totalProfit) }}</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- 單日詳細記錄彈窗 -->
        <div class="modal" v-if="showDayDetailModal">
            <div class="day-detail">
                <div class="detail-header">
                    <div class="title">{{ formatDateTitle(selectedDate) }} 注單詳情</div>
                    <button class="close-btn" @click="showDayDetailModal = false">×</button>
                </div>
                
                <!-- 當日統計 -->
                <div class="day-summary">
                    <div class="summary-item">
                        <span class="label">注數:</span>
                        <span class="value">{{ dayDetailStats.betCount }}注</span>
                    </div>
                    <div class="summary-item">
                        <span class="label">盈虧:</span>
                        <span class="value" :class="{ 
                            'profit-positive': dayDetailStats.profit > 0, 
                            'profit-negative': dayDetailStats.profit < 0,
                            'profit-zero': dayDetailStats.profit === 0 
                        }">{{ formatProfit(dayDetailStats.profit) }}</span>
                    </div>
                </div>
                
                <!-- 詳細注單列表 -->
                <div class="record-list">
                    <div v-if="dayDetailRecords.length === 0" class="no-records">
                        當日無注單記錄
                    </div>
                    <div v-for="(bet, index) in dayDetailRecords" :key="`bet-${bet.id}-${index}`" class="record-item">
                        <!-- 頂部信息：期數和狀態 -->
                        <div class="record-top">
                            <div class="period">{{ bet.period }}期</div>
                            <div class="status" :class="bet.win ? 'win' : 'lose'">
                                {{ bet.win ? '贏' : '輸' }}
                            </div>
                        </div>
                        
                        <!-- 投注資訊區域：投注類型和選項 -->
                        <div class="record-bet-info">
                            <div class="bet-detail-row">
                                <span class="bet-label">投注類型:</span>
                                <span class="bet-value">{{ formatBetType(bet.betType, bet.value, bet.position) }}</span>
                            </div>
                            <div class="bet-detail-row">
                                <span class="bet-label">投注選項:</span>
                                <span class="bet-value">{{ formatBetValue(bet.value) }}</span>
                            </div>
                            <div class="bet-detail-row">
                                <span class="bet-label">賠率:</span>
                                <span class="bet-value">{{ bet.odds ? bet.odds.toFixed(2) : '1.00' }}</span>
                            </div>
                            <!-- 開獎號碼顯示 -->
                            <div v-if="bet.drawResult" class="bet-detail-row draw-result-row">
                                <span class="bet-label">開獎號碼:</span>
                                <div class="draw-result-balls">
                                    <div v-for="(number, index) in bet.drawResult" :key="index" 
                                         :class="['result-ball', 'color-' + number]">
                                        {{ number }}
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 底部信息：金額和時間 -->
                        <div class="record-bottom">
                            <!-- 時間信息 -->
                            <div class="bet-time-info">
                                <span class="bet-label">下注時間:</span>
                                <span class="time-value">{{ formatDateTime(bet.time) }}</span>
                            </div>
                            
                            <!-- 金額信息 -->
                            <div class="bet-amount-info">
                                <div class="amount-row">
                                    <span class="amount-label">下注金額:</span>
                                    <span class="amount-value">{{ formatMoney(bet.amount) }}</span>
                                </div>
                                <div v-if="bet.win && bet.winAmount" class="amount-row win-amount">
                                    <span class="amount-label">派彩金額:</span>
                                    <span class="amount-value">{{ formatMoney(bet.winAmount) }}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 開獎歷史彈窗 -->
        <div class="modal" v-if="showHistory">
            <div class="draw-history">
                <div class="history-header">
                    <div class="title">歷史開獎</div>
                    <button class="close-btn" @click="showHistory = false">×</button>
                </div>
                
                <!-- 新增日期搜尋功能 -->
                <div class="history-search">
                    <div class="search-row">
                        <div class="search-item">
                            <label>日期搜尋:</label>
                            <input type="date" v-model="historySearchDate" @change="searchHistoryByDate">
                        </div>
                        <div class="search-item">
                            <label>期數搜尋:</label>
                            <input type="text" v-model="historySearchPeriod" placeholder="輸入期數" @input="searchHistoryByPeriod">
                        </div>
                        <div class="search-actions">
                            <button class="search-btn" @click="searchTodayHistory">今日開獎</button>
                            <button class="clear-btn" @click="clearHistorySearch">清除搜尋</button>
                        </div>
                    </div>
                </div>
                
                <!-- 簡易開獎記錄列表 -->
                <div class="history-list">
                    <div v-if="recentResults.length === 0" class="no-records">
                        暫無開獎記錄
                    </div>
                    <div v-for="(record, index) in recentResults" :key="`history-${record.period}-${index}`" class="history-item">
                        <div class="period-info">
                            <div class="period">{{ record.period }}期</div>
                            <div class="time">{{ formatDateTime(record.time) }}</div>
                        </div>
                        <div class="result-balls">
                            <div v-for="(number, ballIndex) in record.result" :key="ballIndex" 
                                 :class="['number-ball', 'color-' + number]">
                                {{ number }}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 登入彈窗 - 根據爬蟲網站添加 -->
        <div class="modal" v-if="showLoginModal">
            <div class="login-modal">
                <div class="login-header">
                    <h3>用戶登入</h3>
                    <button class="close-btn" @click="showLoginModal = false">×</button>
                </div>
                <div class="login-form">
                    <div class="form-group">
                        <label for="username">用戶名</label>
                        <input type="text" id="username" v-model="loginForm.username" placeholder="請輸入用戶名">
                    </div>
                    <div class="form-group">
                        <label for="password">密碼</label>
                        <input type="password" id="password" v-model="loginForm.password" placeholder="請輸入密碼">
                    </div>
                    <div class="login-actions">
                        <button class="login-button" @click="login">登入</button>
                        <button class="register-button" @click="showRegisterModal = true; showLoginModal = false">註冊賬號</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 註冊彈窗 - 根據爬蟲網站添加 -->
        <div class="modal" v-if="showRegisterModal">
            <div class="register-modal">
                <div class="register-header">
                    <h3>用戶註冊</h3>
                    <button class="close-btn" @click="showRegisterModal = false">×</button>
                </div>
                <div class="register-form">
                    <div class="form-group">
                        <label for="reg-username">用戶名</label>
                        <input type="text" id="reg-username" v-model="registerForm.username" placeholder="請輸入用戶名">
                    </div>
                    <div class="form-group">
                        <label for="reg-password">密碼</label>
                        <input type="password" id="reg-password" v-model="registerForm.password" placeholder="請輸入密碼">
                    </div>
                    <div class="form-group">
                        <label for="reg-confirm">確認密碼</label>
                        <input type="password" id="reg-confirm" v-model="registerForm.confirmPassword" placeholder="請再次輸入密碼">
                    </div>
                    <div class="login-actions">
                        <button class="register-button" @click="register">註冊</button>
                        <button class="login-button" @click="showLoginModal = true; showRegisterModal = false">返回登入</button>
                    </div>
                </div>
            </div>
        </div>



        <!-- 顯示通知的元素 -->
        <!-- 🎯 彈出式通知視窗 -->
        <div v-if="notificationVisible" class="notification-popup" @click="notificationVisible = false">
            <div class="notification-content" @click.stop>
                <div class="notification-message">{{ notificationText }}</div>
                <button class="notification-close" @click="notificationVisible = false">✕</button>
            </div>
        </div>
    </div>

    <!-- Vue 實例 -->
    <script>
        new Vue({
            el: '#app',
            data() {
                return {
                    API_BASE_URL: window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' 
                        ? 'http://localhost:3002' 
                        : '', // 在production環境中使用相同域名
                    // 用戶相關
                    isLoggedIn: false,
                    username: '',
                    balance: 0,
                    balanceChanged: false,

                    
                    // 遊戲狀態
                    gameStatus: 'betting', // betting or drawing
                    currentPeriod: '',
                    isAnimationEnabled: true, // 開獎動畫開關
                    nextPeriod: '',
                    countdownSeconds: 60,
                    drawingAnimationPlayed: false, // 追蹤開獎動畫是否已播放
                isDrawingInProgress: false, // 追蹤開獎流程是否進行中
                drawingTimeout: null, // 開獎超時計時器
                raceOverlay: null, // 賽車競賽覆蓋層引用
                racingCars: null, // 競賽中的賽車數據
                racingInterval: null, // 賽車競賽動畫計時器
                    lastResult: [],
                    lastResults: [],
                    isRacing: false,
                    
                    // 🎯 預先開獎結果相關
                    nextResult: null, // 存儲預先生成的開獎結果
                    nextResultFetched: false, // 標記是否已獲取預先結果
                    
                    // 投注相關
                    defaultBetAmount: 1, // 默認投注金額
                    betAmount: 1,
                    selectedBets: [],
                    activeTab: 'combined', // 當前活躍的標籤頁
                    
                    // 位置選擇相關
                    selectedPosition: null,
                    selectedPositions: [], // 多選位置
                    positions: [
                        { value: 1, label: '第一名' },
                        { value: 2, label: '第二名' },
                        { value: 3, label: '第三名' },
                        { value: 4, label: '第四名' },
                        { value: 5, label: '第五名' },
                        { value: 6, label: '第六名' },
                        { value: 7, label: '第七名' },
                        { value: 8, label: '第八名' },
                        { value: 9, label: '第九名' },
                        { value: 10, label: '第十名' }
                    ],
                    
                    // 顯示狀態
                    showHistory: false,
                    showRecords: false,
                    showProfitModal: false,
                    showDayDetailModal: false,
                    showDropdownMenu: false, // 控制下拉菜單顯示狀態
                    
                    // 熱門投注
                    hotBets: [],
                    
                    // 投注記錄
                    betRecords: [],
                    betRecordsPagination: {
                        page: 1,
                        pageSize: 20,
                        total: 0
                    },
                    
                    // 歷史開獎記錄
                    historyRecords: [],
                    historyPagination: {
                        page: 1,
                        pageSize: 20,
                        total: 0
                    },
                    
                    // 歷史開獎搜尋
                    historySearchDate: '',
                    historySearchPeriod: '',
                    
                    // 統計數據
                    dailyBetCount: 0,
                    dailyProfit: 0,
                    
                    // 盈虧記錄相關
                    profitTimeRange: 'thisWeek',
                    profitRecords: [],
                    totalBetCount: 0,
                    totalProfit: 0,
                    selectedDate: '',
                    dayDetailRecords: [],
                    dayDetailStats: {
                        betCount: 0,
                        profit: 0
                    },
                    
                    // 通知系統
                    notificationText: '',
                    notificationVisible: false,
                    
                    // 自訂金額
                    customAmount: '',
                    
                    // 賠率數據
                    odds: {
                        sumValue: {
                            '3': 41, '4': 41, '5': 21, '6': 21, '7': 14, '8': 14,
                            '9': 11, '10': 11, '11': 9, '12': 9, '13': 9, '14': 9, 
                            '15': 9, '16': 9, '17': 11, '18': 11, '19': 14, 
                            big: 1.96, small: 1.96, odd: 1.96, even: 1.96
                        },
                        champion: { big: 1.96, small: 1.96, odd: 1.96, even: 1.96 },
                        runnerup: { big: 1.96, small: 1.96, odd: 1.96, even: 1.96 },
                        third: { big: 1.96, small: 1.96, odd: 1.96, even: 1.96 },
                        fourth: { big: 1.96, small: 1.96, odd: 1.96, even: 1.96 },
                        fifth: { big: 1.96, small: 1.96, odd: 1.96, even: 1.96 },
                        sixth: { big: 1.96, small: 1.96, odd: 1.96, even: 1.96 },
                        seventh: { big: 1.96, small: 1.96, odd: 1.96, even: 1.96 },
                        eighth: { big: 1.96, small: 1.96, odd: 1.96, even: 1.96 },
                        ninth: { big: 1.96, small: 1.96, odd: 1.96, even: 1.96 },
                        tenth: { big: 1.96, small: 1.96, odd: 1.96, even: 1.96 },
                        dragonTiger: { 
                            dragon: 1.96, 
                            tiger: 1.96 
                        },
                        number: {
                            first: 9.59,
                            second: 9.59,
                            third: 9.59,
                            fourth: 9.59,
                            fifth: 9.59,
                            sixth: 9.59,
                            seventh: 9.59,
                            eighth: 9.59,
                            ninth: 9.59,
                            tenth: 9.59
                        }
                    },
                    hotBets: [],
                    longestStreak: { count: 0, name: '' },
                    showLoginModal: false,
                    showRegisterModal: false,
                    loginForm: {
                        username: '',
                        password: ''
                    },
                    registerForm: {
                        username: '',
                        password: '',
                        confirmPassword: ''
                    },
                    
                    // 通知相關
                    notificationVisible: false,
                    notificationText: '',
                    
                    // 開獎結果標籤
                    resultLabels: Array.from({ length: 10 }, (_, i) => `${i + 1}名`),
                    
                    // 新的下注確認相關
                    showBetModal: false,
                    autoAcceptBetterOdds: true,
                    hasLastBets: false,
                    lastBets: [],
                    showChips: false,
                };
            },
            created() {
                // 初始化 sessionStorage
                if (typeof window.sessionStorage === 'undefined') {
                    window.sessionStorage = {
                        getItem: function(key) { return null; },
                        setItem: function(key, value) {},
                        removeItem: function(key) {}
                    };
                }
                // 初始化歷史開獎記錄為空數組，防止undefined錯誤
                this.recentResults = [];
                this.checkLoginStatus();
            },
            computed: {
                countdownDisplay() {
                    const minutes = Math.floor(this.countdownSeconds / 60);
                    const seconds = this.countdownSeconds % 60;
                    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                },
                isMobile() {
                    return /Mobi|Android/i.test(navigator.userAgent);
                },
                formattedCurrentPeriod() {
                    // 格式化期號顯示，確保顯示完整期號
                    if (!this.currentPeriod) return '';
                    const period = this.currentPeriod.toString();
                    // 如果期號以數字日期開頭且長度大於11位，可能是錯誤格式，只取後8位
                    if (period.length > 11 && /^\d{8}/.test(period)) {
                        return period.slice(-8);
                    }
                    // 否則顯示完整期號
                    return period;
                }
            },
            methods: {
                // 初始化倒計時功能
                initCountdown() {
                    // 每秒更新倒計時
                    this.countdownTimer = setInterval(() => {
                        if (this.countdownSeconds > 0) {
                            this.countdownSeconds--;
                            this.updateCountdownDisplay();
                        }
                    }, 1000);
                    
                    // 檢查登錄狀態
                    this.checkLoginStatus();
                    
                    // 更新初始資料
                    this.updateDailyStats();
                    this.updateHistoryRecords();
                    
                    // 立即更新一次遊戲數據以獲取最新狀態
                    this.updateGameData();
                },
                
                formatMoney(amount) {
                    if (amount === null || amount === undefined) {
                        return '0';
                    }
                    return amount.toLocaleString('zh-TW', {
                        style: 'currency',
                        currency: 'TWD',
                        minimumFractionDigits: 0,
                        maximumFractionDigits: 0
                    });
                },
                
                // 格式化盈虧金額，顯示+/-符號
                formatProfit(amount) {
                    if (amount === null || amount === undefined || amount === 0) {
                        return '$0';
                    }
                    
                    const formattedAmount = Math.abs(amount).toLocaleString('zh-TW', {
                        minimumFractionDigits: 0,
                        maximumFractionDigits: 0
                    });
                    
                    if (amount > 0) {
                        return `+$${formattedAmount}`;
                    } else {
                        return `-$${formattedAmount}`;
                    }
                },
                formatTime(seconds) {
                    const mins = Math.floor(seconds / 60);
                    const secs = seconds % 60;
                    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
                },
                formatOdds(odds) {
                    if (odds === undefined || odds === null) {
                        return "0.00";
                    }
                    return odds.toFixed(2);
                },
                getPositionName(position) {
                    const names = ['冠', '亞', '三', '四', '五', '六', '七', '八', '九', '十'];
                    return names[position - 1] || position;
                },
                isSelected(betType, value, position = null) {
                    return this.selectedBets.some(bet => 
                        bet.type === betType && 
                        bet.value === value && 
                        bet.position === position
                    );
                },
                selectBet(betType, value, position = null) {
                    // 檢查遊戲狀態：只有在betting狀態下才能選擇下注
                    if (this.gameStatus !== 'betting') {
                        console.log('⚠️ 當前非下注時間，無法選擇投注');
                        return;
                    }
                    
                    const bet = {
                        type: betType,
                        value: value,
                        position: position,
                        amount: 0 // 不立即設置金額，在確認時才設置
                    };

                    const existingBetIndex = this.selectedBets.findIndex(b => 
                        b.type === betType && 
                        b.value === value && 
                        b.position === position
                    );

                    if (existingBetIndex === -1) {
                        this.selectedBets.push(bet);
                    } else {
                        this.selectedBets.splice(existingBetIndex, 1);
                    }
                },
                
                // 判斷一個選項是否為熱門投注
                isHotBet(betType, value, position = null) {
                    if (!this.hotBets || this.hotBets.length === 0) return false;
                    
                    return this.hotBets.some(bet => 
                        bet.betType === betType && 
                        bet.betValue === value && 
                        (position === null || bet.position === position)
                    );
                },
                checkLoginStatus() {
                    const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';
                    const username = sessionStorage.getItem('username');
                    const memberId = sessionStorage.getItem('memberId');
                    
                    if (isLoggedIn && username && memberId) {
                        this.username = username;
                        // 確保初始化時就轉換為數字類型
                        this.balance = parseFloat(sessionStorage.getItem('balance') || '0');
                        this.isLoggedIn = true;
                        
                        // 直接從API獲取最新餘額，確保與伺服器同步
                        this.updateBalance();
                        
                        // 獲取今日盈虧
                        this.updateDailyProfit();
                    } else {
                        // 登入資訊不完整，重定向到登入頁面
                        sessionStorage.clear();
                        window.location.href = 'login.html';
                    }
                },
                logout() {
                    // 清除所有登入資訊並跳轉到登入頁面
                    sessionStorage.clear();
                    this.username = '';
                    this.balance = 0;
                    this.selectedBets = [];
                    this.betHistory = [];
                    this.isLoggedIn = false;
                    
                    // 跳轉到登入頁面
                    window.location.href = 'login.html';
                },
                showGameRules() {
                    // 顯示遊戲規則
                    alert('遊戲規則說明：\n\n北京賽車PK10是一個數字競猜遊戲。\n\n投注選項：\n- 大小：1-5為小，6-10為大\n- 單雙：奇數為單，偶數為雙\n- 冠亞和：冠軍和亞軍號碼的和值\n- 龍虎：冠軍vs亞軍的大小比較');
                    this.showDropdownMenu = false; // 關閉選單
                },
                toggleDropdown() {
                    // 切換下拉菜單的顯示狀態
                    this.showDropdownMenu = !this.showDropdownMenu;
                    
                    // 如果打開選單，立即更新今日盈虧
                    if (this.showDropdownMenu) {
                        this.updateDailyProfit();
                    }
                },
                updateGameData() {
                    console.log('開始獲取遊戲數據...');
                    return fetch(`${this.API_BASE_URL}/api/game-data`)
                        .then(response => response.json())
                        .then(data => {
                            const serverCountdown = data.gameData.countdownSeconds;
                            const serverPeriod = data.gameData.currentPeriod;
                            const serverStatus = data.gameData.status;
                            
                            console.log(`服務器遊戲數據: 期數=${serverPeriod}, 倒計時=${serverCountdown}, 狀態=${serverStatus}`);
                            console.log(`本地遊戲數據: 期數=${this.currentPeriod}, 倒計時=${this.countdownSeconds}, 狀態=${this.gameStatus}`);
                            
                            // 如果期數變了，完全同步服務器狀態
                            if (this.currentPeriod !== serverPeriod) {
                                console.log('期數已變更，完全同步服務器狀態');
                                this.currentPeriod = serverPeriod;
                                this.countdownSeconds = serverCountdown;
                                this.gameStatus = serverStatus;
                                
                                // 清除舊的結果，確保顯示最新期號
                                if (serverStatus === 'betting') {
                                    // 新一期開始，清除上一期結果避免混亂
                                    console.log(`新一期開始: ${serverPeriod}`);
                                }
                                
                                this.updateBalance();
                                this.updateBetHistory();
                                this.updateHistoryRecords();
                            } 
                            // 如果狀態改變了（比如從betting到drawing），也要同步
                            else if (this.gameStatus !== serverStatus) {
                                console.log(`🔄 遊戲狀態已變更: ${this.gameStatus} → ${serverStatus}`);
                                const previousStatus = this.gameStatus;
                                this.gameStatus = serverStatus;
                                this.countdownSeconds = serverCountdown;
                                
                                if (serverStatus === 'drawing' && previousStatus === 'betting') {
                                    console.log('🎲 封盤倒計時結束，開始開獎流程');
                                    this.startDrawingProcess();
                                } else if (serverStatus === 'betting' && previousStatus === 'drawing') {
                                    console.log('✅ 開獎完成，停止所有動畫並更新結果');
                                    this.completeDrawingProcess();
                                }
                            }
                            // 額外檢查：如果服務器是drawing狀態但本地是betting，強制切換
                            else if (serverStatus === 'drawing' && this.gameStatus === 'betting') {
                                console.log('🚨 強制切換到開獎狀態（可能錯過了狀態變更）');
                                this.gameStatus = 'drawing';
                                if (!this.isDrawingInProgress) {
                                    this.startDrawingProcess();
                                }
                            }
                            // 如果都是drawing狀態，確保動畫已播放
                            else if (serverStatus === 'drawing' && this.gameStatus === 'drawing' && !this.drawingAnimationPlayed && !this.isDrawingInProgress) {
                                console.log('🎯 確保開獎動畫已播放');
                                this.startDrawingProcess();
                            }
                            // 如果倒計時差異太大（超過5秒），進行同步
                            else if (Math.abs(this.countdownSeconds - serverCountdown) > 5) {
                                console.log(`🔄 倒計時差異過大，同步: 本地=${this.countdownSeconds}, 服務器=${serverCountdown}`);
                                this.countdownSeconds = serverCountdown;
                            }
                            
                            // 重置動畫標記（當進入新的betting狀態時）
                            if (serverStatus === 'betting' && this.gameStatus === 'betting') {
                                this.drawingAnimationPlayed = false;
                                // 重置預先結果標記
                                this.nextResult = null;
                                this.nextResultFetched = false;
                            }
                            
                            // 更新其他數據 - 確保動畫使用最新結果
                            if (data.gameData.lastResult && data.gameData.lastResult.length > 0) {
                                this.lastResult = data.gameData.lastResult;
                                this.lastResults = data.gameData.lastResult;
                                console.log(`🎯 更新開獎結果: 期號=${serverPeriod}`);
                            }
                            this.nextPeriod = (parseInt(serverPeriod) + 1).toString();
                            
                            // 🎯 檢查是否需要獲取預先結果（倒計時最後10秒）
                            if (serverStatus === 'betting' && serverCountdown <= 10 && serverCountdown > 0) {
                                this.checkAndFetchNextResult();
                            }
                            
                            this.updateCountdownDisplay();
                        })
                        .catch(error => {
                            console.error('獲取遊戲數據失敗:', error);
                            throw error; // 重新拋出錯誤以便調用者處理
                        });
                },
                
                // 🎯 檢查並獲取預先生成的結果（倒計時最後10秒時）
                checkAndFetchNextResult() {
                    if (!this.nextResultFetched) {
                        console.log('🎲 倒計時最後10秒，開始獲取預先生成的結果...');
                        this.fetchNextResult();
                        this.nextResultFetched = true; // 避免重複獲取
                    }
                },
                
                // 🎯 獲取預先生成的開獎結果
                fetchNextResult() {
                    return fetch(`${this.API_BASE_URL}/api/next-result`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success && data.hasNextResult) {
                                console.log('✅ 成功獲取預先生成的結果');
                                this.nextResult = data.nextResult;
                                
                                // 如果正在開獎中，更新動畫顯示
                                if (this.isDrawingInProgress) {
                                    console.log('🎬 開獎中，使用預先結果更新動畫');
                                    this.updateAnimationWithNextResult();
                                }
                            } else {
                                console.log('⚠️ 沒有可用的預先結果');
                                this.nextResult = null;
                            }
                        })
                        .catch(error => {
                            console.error('獲取預先結果失敗:', error);
                            this.nextResult = null;
                        });
                },
                
                // 🎬 使用預先結果更新動畫顯示
                updateAnimationWithNextResult() {
                    if (!this.nextResult || !Array.isArray(this.nextResult)) {
                        return;
                    }
                    
                                            console.log('🎬 使用預先結果更新賽車競賽');
                    
                    // 更新賽車競賽以使用新結果
                    if (this.racingCars && this.raceOverlay) {
                        // 讓賽車按照預先結果進行競賽
                        this.updateRaceProgressWithResult(this.nextResult);
                    }
                },
                
                // 🏁 根據預先結果更新賽車進度
                updateRaceProgressWithResult(result) {
                    if (!this.racingCars || !result) return;
                    
                    console.log('🏁 根據預先結果調整賽車競賽進度');
                    
                    // 根據開獎結果，讓對應名次的車輛逐漸領先
                    const containerWidth = this.raceOverlay?.querySelector('.race-track-container')?.offsetWidth || 1200;
                    const targetPosition = containerWidth * 0.8; // 80%位置準備衝刺
                    
                    result.forEach((carNumber, finalRank) => {
                        const car = this.racingCars.find(c => c.number === carNumber);
                        if (car) {
                            // 根據最終排名，逐漸調整車輛速度和位置
                            const speedBonus = (10 - finalRank) * 0.5; // 名次越前，速度加成越大
                            car.targetSpeed = 6 + speedBonus;
                            car.finalRank = finalRank;
                        }
                    });
                },
                updateBalance() {
                    console.log('開始刷新餘額...');
                    const username = sessionStorage.getItem('username');
                    if (!username) {
                        console.error('用戶未登入');
                        return;
                    }
                    
                    fetch(`${this.API_BASE_URL}/api/member/balance/${username}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // 檢查餘額是否有變化
                                this.previousBalance = parseFloat(this.balance);
                                // 確保轉換為數字類型，避免字串拼接問題
                                this.balance = parseFloat(data.balance);
                                
                                // 更新sessionStorage中的餘額
                                sessionStorage.setItem('balance', this.balance.toString());
                                
                                // 顯示餘額變化提示
                                if (this.previousBalance !== 0 && this.balance !== this.previousBalance) {
                                    this.balanceChanged = true;
                                    const change = this.balance - this.previousBalance;
                                    
                                    // 添加餘額變化動畫
                                    const balanceElement = document.querySelector('.balance');
                                    if (balanceElement) {
                                        const changeElement = document.createElement('div');
                                        changeElement.className = `balance-change ${change > 0 ? 'increase' : 'decrease'}`;
                                        changeElement.innerText = `${change > 0 ? '+' : ''}${change.toFixed(2)}`;
                                        balanceElement.appendChild(changeElement);
                                        
                                        // 3秒後移除元素
                                        setTimeout(() => {
                                            if (balanceElement.contains(changeElement)) {
                                            balanceElement.removeChild(changeElement);
                                            }
                                        }, 3000);
                                    }
                                    
                                    // 閃爍效果結束後重置
                                    setTimeout(() => {
                                        this.balanceChanged = false;
                                    }, 2000);
                                }
                                
                                console.log('餘額更新成功：', this.balance);
                                
                                // 同時更新今日盈虧
                                this.updateDailyProfit();
                            } else {
                                console.error('獲取餘額失敗:', data.message);
                            }
                        })
                        .catch(error => {
                            console.error('獲取餘額失敗:', error);
                        });
                },
                updateDailyProfit() {
                    const username = sessionStorage.getItem('username');
                    if (!username) return;
                    
                    fetch(`${this.API_BASE_URL}/api/member/profit-loss/${username}?period=today`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                this.dailyProfit = parseFloat(data.data.net) || 0;
                            } else {
                                console.error('獲取今日盈虧失敗:', data.message);
                            }
                        })
                        .catch(error => {
                            console.error('獲取今日盈虧失敗:', error);
                        });
                },
                placeBets() {
                    if (this.selectedBets.length === 0) {
                        alert('請選擇至少一個投注項目');
                        return;
                    }

                    // 檢查是否所有投注項目都有有效金額
                    const invalidBets = this.selectedBets.filter(bet => !bet.amount || bet.amount <= 0);
                    if (invalidBets.length > 0) {
                        alert('請為所有投注項目設置有效金額');
                        return;
                    }

                    const username = sessionStorage.getItem('username');
                    if (!username) {
                        alert('請先登入');
                        return;
                    }

                    // 計算總投注金額
                    const totalBetAmount = this.calculateTotalBetAmount();
                    
                    // 檢查用戶餘額是否足夠
                    if (totalBetAmount > this.balance) {
                        alert('餘額不足');
                        return;
                    }

                    // 顯示加載中提示
                    this.isLoading = true;
                    
                    // 複製選定的注單列表
                    const bets = [...this.selectedBets];
                    
                    // 建立投注請求
                    const promises = bets.map(bet => {
                        return fetch(`${this.API_BASE_URL}/api/bet`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                username,
                                amount: bet.amount,
                                betType: bet.type,
                                value: bet.value,
                                position: bet.position
                            })
                        }).then(res => res.json());
                    });

                    // 先預先更新本地餘額（臨時顯示）
                    const oldBalance = this.balance;
                    this.balance = parseFloat((oldBalance - totalBetAmount).toFixed(2));
                    
                    // 處理所有投注請求
                    Promise.all(promises)
                        .then(results => {
                            // 顯示下注成功的提示訊息
                            this.displayNotification('下注成功！');
                            
                            // 清除所選注單
                                this.selectedBets = [];
                            
                            // 重新獲取最新餘額
                            this.getBalance();
                            
                            // 更新注單歷史
                            this.getBetHistory();
                            
                            // 計算今日盈虧
                            this.updateDailyStats();
                            
                            // 關閉加載中提示
                            this.isLoading = false;
                        })
                        .catch(err => {
                            console.error('下注失敗', err);
                            alert('下注失敗，請稍後再試');
                            
                            // 恢復原始餘額
                            this.balance = oldBalance;
                            
                            // 關閉加載中提示
                            this.isLoading = false;
                        });
                },
                updateBetHistory(page = 1) {
                    fetch(`${this.API_BASE_URL}/api/bet-history?username=${this.username}&page=${page}`)
                        .then(response => response.json())
                        .then(data => {
                            // 檢查是否有新結算的注單
                            const hadSettledBets = this.checkForNewSettlements(this.betHistory, data.records);
                            
                            // 更新注單歷史
                            if (data.success && Array.isArray(data.records)) {
                                this.betHistory = data.records;
                                this.betRecords = data.records;
                            } else {
                                console.error('API返回數據格式錯誤:', data);
                                this.betHistory = [];
                                this.betRecords = [];
                            }
                            
                            // 如果有新結算的注單，再次更新餘額
                            if (hadSettledBets) {
                                console.log('檢測到新結算的注單，更新餘額');
                                this.updateBalance();
                            }
                            
                            // 更新今日統計
                            this.updateDailyStats();
                        })
                        .catch(error => {
                            console.error('獲取注單歷史失敗:', error);
                            // 發生錯誤時將兩個屬性設置為空數組而不是undefined
                            this.betHistory = [];
                            this.betRecords = [];
                        });
                },
                
                // 檢查是否有新結算的注單
                checkForNewSettlements(oldBets, newBets) {
                    // 如果沒有舊注單，則不需要比較
                    if (!oldBets || !Array.isArray(oldBets) || oldBets.length === 0) {
                        return false;
                    }
                    
                    // 創建舊注單的映射，鍵為注單ID，值為settled狀態
                    const oldBetsMap = {};
                    oldBets.forEach(bet => {
                        oldBetsMap[bet.id] = bet.settled;
                    });
                    
                    // 檢查新注單中是否有任何注單從未結算變為已結算
                    let hasNewSettlements = false;
                    if (Array.isArray(newBets)) {
                    newBets.forEach(bet => {
                        // 如果這個注單在舊注單中是未結算，但現在是已結算
                        if (oldBetsMap[bet.id] === false && bet.settled === true) {
                            hasNewSettlements = true;
                        }
                    });
                    }
                    
                    return hasNewSettlements;
                },
                addCustomChip() {
                    const amount = parseInt(this.customChip);
                    if (isNaN(amount) || amount <= 0) {
                        alert('請輸入有效的金額');
                        return;
                    }
                    this.betAmount = amount;
                    this.customChip = '';
                },
                getBetTypeLabel(bet) {
                    const typeMap = {
                        'sumValue': '冠亞和',
                        'champion': '冠軍',
                        'runnerup': '亞軍',
                        'third': '第三名',
                        'fourth': '第四名',
                        'fifth': '第五名',
                        'sixth': '第六名',
                        'seventh': '第七名',
                        'eighth': '第八名',
                        'ninth': '第九名',
                        'tenth': '第十名',
                        'dragonTiger': '龍虎',
                        'number': '單號',
                        'position': '快速'
                    };
                    
                    // 如果是位置投注，顯示具體位置
                    if (bet.type === 'position' && bet.position) {
                        return this.getPositionLabel(bet.position);
                    }
                    
                    return typeMap[bet.type] || bet.type;
                },
                getBetValueLabel(bet) {
                    const valueMap = {
                        'big': '大',
                        'small': '小',
                        'odd': '單',
                        'even': '雙',
                        'dragon': '龍',
                        'tiger': '虎'
                    };
                    
                    if (bet.type === 'number') {
                        return `第${bet.position}名 ${bet.value}號`;
                    }
                    
                    if (bet.type === 'position') {
                        // 位置投注顯示屬性
                        if (bet.property) {
                            return valueMap[bet.property] || bet.property;
                        }
                        // 如果有value，也處理
                        if (bet.value) {
                            return valueMap[bet.value] || bet.value;
                        }
                    }
                    
                    return valueMap[bet.value] || bet.value;
                },
                getBetOdds(bet) {
                    // 退水比例 4.1%
                    const rebatePercentage = 0.041;
                    
                    if (bet.type === 'number') {
                        return this.odds.number[this.positionToKey(bet.position)] || parseFloat((10.0 * (1 - rebatePercentage)).toFixed(3));
                    } else if (bet.type === 'dragonTiger') {
                        return this.odds.dragonTiger[bet.value] || parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3));
                    } else if (bet.type === 'position') {
                        // 位置投注使用固定賠率
                        return bet.odds || this.getPropertyOdds(bet.property) || parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3));
                    } else if (bet.type === 'sumValue') {
                        // 冠亞和值投注
                        if (['big', 'small', 'odd', 'even'].includes(bet.value)) {
                            return this.odds.sumValue[bet.value] || parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3));
                        } else {
                            // 具體數值 - 使用包含退水的賠率表
                            return this.odds.sumValue[bet.value] || parseFloat((7.0 * (1 - rebatePercentage)).toFixed(3));
                        }
                    } else {
                        // 其他投注類型（冠軍、亞軍等）
                        return this.odds[bet.type]?.[bet.value] || parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3));
                    }
                },
                calculateIndividualPotentialProfit(bet) {
                    const odds = this.getBetOdds(bet);
                    return (bet.amount || 0) * odds;
                },
                calculateTotalPotentialProfit() {
                    return this.selectedBets.reduce((total, bet) => {
                        return total + this.calculateIndividualPotentialProfit(bet);
                    }, 0);
                },
                calculateTotalBetAmount() {
                    return this.selectedBets.reduce((total, bet) => {
                        // 如果bet有amount且>0則使用，否則使用當前設定的betAmount
                        const amount = (bet.amount && bet.amount > 0) ? bet.amount : this.betAmount;
                        return total + (parseFloat(amount) || 0);
                    }, 0);
                },
                clearBets() {
                    this.selectedBets = [];
                },
                
                // 新的下注確認流程方法
                showBetConfirmation() {
                    // 為每個選定的投注設置金額
                    this.selectedBets.forEach(bet => {
                        if (!bet.amount || bet.amount <= 0) {
                            bet.amount = this.betAmount;
                        }
                    });
                    this.showBetModal = true;
                },
                
                confirmBets() {
                    // 檢查遊戲狀態：只有在betting狀態下才能確認下注
                    if (this.gameStatus !== 'betting') {
                        alert('當前非下注時間，無法下注！');
                        this.showBetModal = false;
                        return;
                    }
                    
                    // 保存當前投注作為上次投注
                    this.lastBets = JSON.parse(JSON.stringify(this.selectedBets));
                    this.hasLastBets = true;
                    
                    // 執行原有的下注邏輯
                    this.placeBets();
                    this.showBetModal = false;
                },
                
                removeBetFromConfirm(index) {
                    this.selectedBets.splice(index, 1);
                    if (this.selectedBets.length === 0) {
                        this.showBetModal = false;
                    }
                },
                
                repeatLastBets() {
                    if (this.hasLastBets && this.lastBets.length > 0) {
                        // 清除當前選擇
                        this.selectedBets = [];
                        
                        // 重新添加上次的投注
                        this.lastBets.forEach(lastBet => {
                            const newBet = JSON.parse(JSON.stringify(lastBet));
                            newBet.amount = this.betAmount; // 使用當前設置的金額
                            this.selectedBets.push(newBet);
                        });
                    }
                },
                
                // 位置選擇相關方法
                selectPositionNumber(num) {
                    if (!this.selectedPosition) {
                        alert('請先選擇位置');
                        return;
                    }

                    const bet = {
                        type: 'number',
                        position: this.selectedPosition,
                        value: String(num),
                        amount: 0 // 不立即設置金額
                    };

                    const existingBetIndex = this.selectedBets.findIndex(b => 
                        b.type === 'number' && 
                        b.position === this.selectedPosition && 
                        b.value === String(num)
                    );

                    if (existingBetIndex === -1) {
                        this.selectedBets.push(bet);
                    } else {
                        this.selectedBets.splice(existingBetIndex, 1);
                    }
                },
                isSelectedPositionNumber(num) {
                    return this.selectedBets.some(bet => 
                        bet.type === 'number' && 
                        bet.position === this.selectedPosition && 
                        bet.value === String(num)
                    );
                },
                selectProperty(property) {
                    if (!this.selectedPosition) {
                        alert('請先選擇位置');
                        return;
                    }
                    
                    const bet = {
                        type: 'position',
                        position: this.selectedPosition,
                        property: property,
                        amount: this.betAmount
                    };
                    
                    const existingBetIndex = this.selectedBets.findIndex(b => 
                        b.type === 'position' && 
                        b.position === this.selectedPosition && 
                        b.property === property
                    );
                    
                    if (existingBetIndex === -1) {
                        this.selectedBets.push(bet);
                    } else {
                        this.selectedBets.splice(existingBetIndex, 1);
                    }
                },
                isSelectedProperty(property) {
                    return this.selectedBets.some(bet => 
                        bet.type === 'position' && 
                        bet.position === this.selectedPosition && 
                        bet.property === property
                    );
                },
                getPositionLabel(position) {
                    const positionObj = this.positions.find(p => p.value === position);
                    return positionObj ? positionObj.label : `第${position}名`;
                },
                
                // 多位置選擇相關方法
                togglePosition(position) {
                    const index = this.selectedPositions.indexOf(position);
                    if (index === -1) {
                        // 新增位置
                        this.selectedPositions.push(position);
                        // 自動為新位置創建已經選中的號碼和屬性投注
                        this.autoCreateBetsForNewPosition(position);
                    } else {
                        // 移除位置
                        this.selectedPositions.splice(index, 1);
                        // 移除該位置的所有投注
                        this.removeBetsForPosition(position);
                    }
                },
                autoCreateBetsForNewPosition(newPosition) {
                    // 確保投注金額至少為1元
                    if (!this.betAmount || this.betAmount <= 0) {
                        this.betAmount = 1;
                    }
                    
                    // 獲取已經在其他位置選中的號碼
                    const selectedNumbers = new Set();
                    const selectedProperties = new Set();
                    
                    this.selectedBets.forEach(bet => {
                        if (bet.type === 'number' && this.selectedPositions.includes(bet.position)) {
                            selectedNumbers.add(bet.value);
                        }
                        if (bet.type === 'position' && this.selectedPositions.includes(bet.position)) {
                            selectedProperties.add(bet.property);
                        }
                    });
                    
                    // 為新位置創建號碼投注
                    selectedNumbers.forEach(number => {
                        const existingBetIndex = this.selectedBets.findIndex(b => 
                            b.type === 'number' && 
                            b.position === newPosition && 
                            b.value === number
                        );
                        
                        if (existingBetIndex === -1) {
                            this.selectedBets.push({
                                type: 'number',
                                position: newPosition,
                                value: number,
                                amount: this.betAmount
                            });
                        }
                    });
                    
                    // 為新位置創建屬性投注
                    selectedProperties.forEach(property => {
                        const existingBetIndex = this.selectedBets.findIndex(b => 
                            b.type === 'position' && 
                            b.position === newPosition && 
                            b.property === property
                        );
                        
                        if (existingBetIndex === -1) {
                            this.selectedBets.push({
                                type: 'position',
                                position: newPosition,
                                property: property,
                                amount: this.betAmount
                            });
                        }
                    });
                },
                removeBetsForPosition(position) {
                    // 移除指定位置的所有投注
                    this.selectedBets = this.selectedBets.filter(bet => 
                        bet.position !== position
                    );
                },
                clearPositions() {
                    // 移除所有快速標籤頁的投注項目
                    this.selectedBets = this.selectedBets.filter(bet => 
                        !this.selectedPositions.includes(bet.position)
                    );
                    this.selectedPositions = [];
                },
                getSelectedPositionsLabel() {
                    if (this.selectedPositions.length === 0) return '';
                    if (this.selectedPositions.length === 1) {
                        return this.getPositionLabel(this.selectedPositions[0]);
                    }
                    return `${this.selectedPositions.length}個位置`;
                },
                selectMultiPositionNumber(num) {
                    if (this.selectedPositions.length === 0) {
                        alert('請先選擇位置');
                        return;
                    }

                    // 確保投注金額至少為1元
                    if (!this.betAmount || this.betAmount <= 0) {
                        this.betAmount = 1;
                    }

                    this.selectedPositions.forEach(position => {
                        const bet = {
                            type: 'number',
                            position: position,
                            value: String(num),
                            amount: this.betAmount
                        };

                        const existingBetIndex = this.selectedBets.findIndex(b => 
                            b.type === 'number' && 
                            b.position === position && 
                            b.value === String(num)
                        );

                        if (existingBetIndex === -1) {
                            this.selectedBets.push(bet);
                        } else {
                            this.selectedBets.splice(existingBetIndex, 1);
                        }
                    });
                },
                isAnyPositionNumberSelected(num) {
                    return this.selectedPositions.some(position => 
                        this.selectedBets.some(bet => 
                            bet.type === 'number' && 
                            bet.position === position && 
                            bet.value === String(num)
                        )
                    );
                },
                selectMultiPositionProperty(property) {
                    if (this.selectedPositions.length === 0) {
                        alert('請先選擇位置');
                        return;
                    }
                    
                    // 確保投注金額至少為1元
                    if (!this.betAmount || this.betAmount <= 0) {
                        this.betAmount = 1;
                    }
                    
                    this.selectedPositions.forEach(position => {
                        const bet = {
                            type: 'position',
                            position: position,
                            property: property,
                            amount: this.betAmount
                        };
                        
                        const existingBetIndex = this.selectedBets.findIndex(b => 
                            b.type === 'position' && 
                            b.position === position && 
                            b.property === property
                        );
                        
                        if (existingBetIndex === -1) {
                            this.selectedBets.push(bet);
                        } else {
                            this.selectedBets.splice(existingBetIndex, 1);
                        }
                    });
                },
                isAnyPositionPropertySelected(property) {
                    return this.selectedPositions.some(position => 
                        this.selectedBets.some(bet => 
                            bet.type === 'position' && 
                            bet.position === position && 
                            bet.property === property
                        )
                    );
                },

                getPropertyOdds(property) {
                    // 退水比例 4.1%
                    const rebatePercentage = 0.041;
                    const baseOdds = {
                        big: parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3)),    // 1.96 × (1-4.1%) = 1.88
                        small: parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3)),
                        odd: parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3)),
                        even: parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3)),
                        dragon: parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3)),
                        tiger: parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3))
                    };
                    return baseOdds[property] || parseFloat((1.96 * (1 - rebatePercentage)).toFixed(3));
                },
                getSumClass(sum) {
                    if (sum > 11) {
                        return 'big';
                    } else if (sum <= 11) {
                        return 'small';
                    }
                    return '';
                },
                getSumLabel(sum) {
                    let labels = [];
                    
                    // 大小
                    if (sum > 11) {
                        labels.push('大');
                    } else {
                        labels.push('小');
                    }
                    
                    // 單雙
                    if (sum % 2 === 1) {
                        labels.push('單');
                    } else {
                        labels.push('雙');
                    }
                    
                    return labels.join('/');
                },
                getSumValueOdds(value) {
                    return this.odds.sumValue[String(value)] || 0;
                },
                setBetAmount(amount) {
                    this.betAmount = amount;
                    // 只更新沒有設置金額的投注項目
                    this.selectedBets.forEach(bet => {
                        if (!bet.amount || bet.amount <= 0) {
                            bet.amount = amount;
                        }
                    });
                },
                setAllBetAmount(amount) {
                    this.betAmount = amount;
                    // 設置所有投注項目的金額
                    this.selectedBets.forEach(bet => {
                        bet.amount = amount;
                    });
                },
                updateBetAmount(index, amount) {
                    // 允許空白輸入（用戶正在編輯時）
                    if (amount === '' || amount === null || amount === undefined) {
                        if (this.selectedBets[index]) {
                            this.selectedBets[index].amount = '';
                        }
                        return;
                    }
                    
                    const numAmount = parseFloat(amount);
                    if (isNaN(numAmount) || numAmount < 1) {
                        // 無效輸入，恢復為 1
                        if (this.selectedBets[index]) {
                            this.selectedBets[index].amount = 1;
                        }
                        return;
                    }
                    
                    if (this.selectedBets[index]) {
                        this.selectedBets[index].amount = numAmount;
                    }
                },
                handleAmountFocus(index, event) {
                    // 當用戶點擊輸入框時，如果值為 1，則全選以便直接覆蓋
                    if (this.selectedBets[index] && this.selectedBets[index].amount === 1) {
                        event.target.select();
                    }
                },
                handleAmountBlur(index, event) {
                    // 當用戶離開輸入框時，如果為空或無效值，則設為 1
                    const value = event.target.value;
                    if (value === '' || value === null || isNaN(parseFloat(value)) || parseFloat(value) < 1) {
                        if (this.selectedBets[index]) {
                            this.selectedBets[index].amount = 1;
                        }
                    }
                },
                setAllCustomAmount() {
                    if (this.customAmount && !isNaN(this.customAmount) && this.customAmount > 0) {
                        const amount = parseFloat(this.customAmount);
                        this.setAllBetAmount(amount);
                        this.customAmount = ''; // 清空輸入框
                    } else {
                        alert('請輸入有效的下注金額');
                    }
                },
                positionToKey(position) {
                    const positionMap = {
                        1: 'first',
                        2: 'second',
                        3: 'third',
                        4: 'fourth',
                        5: 'fifth'
                    };
                    return positionMap[position] || 'first';
                },
                updateDailyStats() {
                    let dailyBetCount = 0;
                    let dailyProfit = 0;
                    
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    
                    // 確保betHistory是數組
                    if (Array.isArray(this.betHistory)) {
                        this.betHistory.forEach(bet => {
                        const betDate = new Date(bet.time);
                    
                            // 只統計今日的注單
                            if (betDate >= today) {
                                dailyBetCount++;
                    
                                // 確保金額是數字類型
                                const betAmount = parseFloat(bet.amount) || 0;
                                
                                // 如果已結算，計算盈虧
                        if (bet.settled) {
                                    // 根據輸贏計算盈虧
                            if (bet.win) {
                                        // 贏: 獲得獎金 - 下注金額 = 凈利潤
                                        const winAmount = parseFloat(bet.winAmount) || 0;
                                        dailyProfit += (winAmount - betAmount);
                            } else {
                                        // 輸: 損失下注金額
                                        dailyProfit -= betAmount;
                                    }
                                }
                            }
                        });
                    }
                    
                    // 確保顯示為整數
                    this.dailyBetCount = dailyBetCount;
                    this.dailyProfit = Math.round(dailyProfit);
                },
                getBalance() {
                    const username = sessionStorage.getItem('username');
                    if (!username) return;
                    
                    fetch(`${this.API_BASE_URL}/api/balance?username=${username}`)
                        .then(res => res.json())
                        .then(data => {
                            if (data.success) {
                                // 確保餘額是數字類型
                                this.balance = parseFloat(data.balance) || 0;
                            }
                        })
                        .catch(err => {
                            console.error('獲取餘額失敗', err);
                        });
                },
                getBetHistory() {
                    fetch(`${this.API_BASE_URL}/api/bet-history?username=${this.username}`)
                        .then(res => res.json())
                        .then(data => {
                            if (data.success && Array.isArray(data.records)) {
                                this.betHistory = data.records;
                                this.betRecords = data.records;
                            } else {
                                console.error('API返回數據格式錯誤:', data);
                                this.betHistory = [];
                                this.betRecords = [];
                            }
                        })
                        .catch(error => {
                            console.error('獲取注單歷史失敗:', error);
                            this.betHistory = [];
                            this.betRecords = [];
                        });
                },
                updateHistoryRecords(page = 1, date = '', period = '') {
                    // 構建查詢參數
                    const params = new URLSearchParams();
                    params.append('page', page);
                    if (date) params.append('date', date);
                    if (period) params.append('period', period);
                    
                    fetch(`${this.API_BASE_URL}/api/history?${params.toString()}`)
                        .then(response => response.json())
                        .then(data => {
                            console.log('開獎歷史API返回數據:', JSON.stringify(data).substring(0, 200) + '...');
                            // 更新歷史記錄 - 修正數據結構處理
                            if (data.success && Array.isArray(data.records)) {
                                this.recentResults = data.records;
                                console.log('開獎歷史更新成功，記錄數量:', data.records.length);
                            } else {
                                // 當 API 返回格式不正確或為空時的處理
                                console.error('開獎歷史API返回異常數據格式:', data);
                                this.recentResults = [];
                            }
                            
                            // 生成結果標籤（1-10名）
                            if (this.resultLabels.length === 0) {
                                this.resultLabels = Array.from({ length: 10 }, (_, i) => `${i + 1}名`);
                            }
                        })
                        .catch(error => {
                            console.error('獲取開獎歷史記錄失敗:', error);
                            this.recentResults = []; // 確保出錯時也設置為空數組
                        });
                },
                updateCountdownDisplay() {
                    const countdownDisplay = document.querySelector('.countdown-section .period-countdown .bet-countdown');
                    if (countdownDisplay) {
                        countdownDisplay.textContent = this.formatTime(this.countdownSeconds);
                    }
                },
                startUpdateTimers() {
                    // 每秒更新倒計時
                    this.countdownTimer = setInterval(() => {
                        if (this.countdownSeconds > 0) {
                            this.countdownSeconds--;
                            this.updateCountdownDisplay();
                        }
                    }, 1000);
                    
                                    // 每5秒更新遊戲數據（避免太頻繁覆蓋本地倒計時）
                this.gameDataTimer = setInterval(() => {
                    this.updateGameData();
                    // 每次更新遊戲數據時也更新歷史記錄
                    this.updateHistoryRecords();
                }, 5000);
                    
                    // 每10秒更新余額和下注記錄
                    this.balanceTimer = setInterval(() => {
                        this.updateBalance();
                        this.updateBetHistory();
                        this.updateDailyStats();
                    }, 10000);
                    
                    // 每5秒更新歷史記錄以確保即時性
                    this.historyTimer = setInterval(() => {
                        this.updateHistoryRecords();
                    }, 5000);
                },
                stopUpdateTimers() {
                    clearInterval(this.countdownTimer);
                    clearInterval(this.gameDataTimer);
                    clearInterval(this.balanceTimer);
                    clearInterval(this.historyTimer);
                },
                playSound(sound) {
                    try {
                        // 修正音效路徑
                        const audio = new Audio(`./sounds/${sound}.mp3`);
                        // 將音量調低以避免過大聲
                        audio.volume = 0.5;
                        // 使用 catch 捕捉播放失敗錯誤
                        const playPromise = audio.play();
                        if (playPromise !== undefined) {
                            playPromise.catch(error => {
                                console.log('音效播放已被瀏覽器阻止，這是正常的，需要用戶交互後才能播放');
                            });
                        }
                    } catch (error) {
                        console.log('音效播放錯誤，但不影響系統運行', error);
                    }
                },
                // 動畫開關控制 - 確保獲取到最新開獎結果或開獎中使用預先結果
                toggleAnimation() {
                    console.log(`點擊賽車按鈕 - 遊戲狀態: ${this.gameStatus}, 倒計時: ${this.countdownSeconds}, 期號: ${this.currentPeriod}, 開獎中: ${this.isDrawingInProgress}`);
                    
                    // 如果正在開獎中，使用預先獲取的結果立即播放動畫
                    if (this.isDrawingInProgress && this.nextResult && this.nextResult.length === 10) {
                        console.log('🏁 開獎中點擊賽車按鈕，使用預先結果播放動畫');
                        this.lastResults = this.nextResult;
                        this.playRaceAnimation();
                        return;
                    }
                    
                    // 如果正在下注期間（倒計時大於0），顯示提示
                    if (this.gameStatus === 'betting' && this.countdownSeconds > 0) {
                        this.displayNotification('尚未開獎，請等待開獎後再播放動畫！');
                        return;
                    }
                    
                    // 顯示加載提示
                    this.displayNotification('正在獲取最新開獎結果...');
                    
                    // 多重嘗試獲取最新結果
                    console.log('🔍 開始多重嘗試獲取最新開獎結果...');
                    
                    // 第一次嘗試：直接從API獲取最新結果
                    this.getLatestResultFromHistory().then((latestResult) => {
                        if (latestResult && latestResult.length === 10) {
                            console.log(`✅ 第一次嘗試成功，獲取到結果`);
                            this.lastResults = latestResult;
                            this.playRaceAnimation();
                            return;
                        }
                        
                        console.log('⚠️ 第一次嘗試失敗，延遲1秒後第二次嘗試...');
                        // 第二次嘗試：延遲1秒後再次獲取
                        setTimeout(() => {
                            this.getLatestResultFromHistory().then((latestResult2) => {
                                if (latestResult2 && latestResult2.length === 10) {
                                    console.log(`✅ 第二次嘗試成功，獲取到結果`);
                                    this.lastResults = latestResult2;
                                    this.playRaceAnimation();
                                    return;
                                }
                                
                                console.log('⚠️ 第二次嘗試失敗，嘗試從遊戲數據獲取...');
                                // 第三次嘗試：從遊戲數據獲取
                                this.updateGameData().then(() => {
                                    if (this.lastResults && this.lastResults.length === 10) {
                                        console.log(`✅ 第三次嘗試成功，從遊戲數據獲取到結果`);
                                        this.playRaceAnimation();
                                    } else {
                                        console.error('❌ 所有嘗試均失敗');
                                        this.displayNotification('無法獲取最新開獎結果，請稍後再試');
                                    }
                                }).catch((error) => {
                                    console.error('第三次嘗試失敗:', error);
                                    this.displayNotification('獲取開獎數據失敗，請稍後再試');
                                });
                            }).catch((error) => {
                                console.error('第二次嘗試出錯:', error);
                                this.displayNotification('獲取開獎數據失敗，請稍後再試');
                            });
                        }, 1000);
                        
                    }).catch((error) => {
                        console.error('第一次嘗試出錯:', error);
                        this.displayNotification('獲取開獎數據失敗，請稍後再試');
                    });
                },
                
                // 🎯 從歷史記錄獲取最新開獎結果（增強版）
                async getLatestResultFromHistory() {
                    try {
                        console.log('🔍 正在獲取最新開獎結果...');
                        const response = await fetch(`${this.API_BASE_URL}/api/results/latest?t=${Date.now()}`);
                        const data = await response.json();
                        
                        console.log('📊 API返回的原始數據:', data);
                        
                        if (data.success && data.result) {
                            let resultArray = [];
                            
                            // 處理不同格式的結果數據
                            if (data.result.result_numbers) {
                                if (typeof data.result.result_numbers === 'string') {
                                    resultArray = data.result.result_numbers.split(',').map(num => parseInt(num.trim()));
                                } else if (Array.isArray(data.result.result_numbers)) {
                                    resultArray = data.result.result_numbers.map(num => parseInt(num));
                                }
                            } else if (data.result.result) {
                                if (typeof data.result.result === 'string') {
                                    resultArray = data.result.result.split(',').map(num => parseInt(num.trim()));
                                } else if (Array.isArray(data.result.result)) {
                                    resultArray = data.result.result.map(num => parseInt(num));
                                }
                            }
                            
                            console.log(`🎯 解析後的結果數組長度: ${resultArray.length}`);
                            console.log(`📅 結果期號: ${data.result.period}`);
                            console.log(`⏰ 結果時間: ${data.result.created_at}`);
                            
                            // 驗證結果有效性
                            if (resultArray.length === 10 && resultArray.every(num => num >= 1 && num <= 10)) {
                                console.log(`✅ 獲取到有效的最新開獎結果: 期號=${data.result.period}`);
                                return resultArray;
                            } else {
                                console.warn('⚠️ 結果數據格式不正確');
                                return null;
                            }
                        } else {
                            console.warn('⚠️ API返回失敗或無結果:', data);
                            return null;
                        }
                    } catch (error) {
                        console.error('❌ 獲取最新結果失敗:', error);
                        return null;
                    }
                },
                
                // 🎲 簡單的洗球動畫效果（開獎時自動播放）
                playSimpleDrawEffect() {
                    console.log('🎲 播放簡單洗球動畫效果');
                    
                    // 設置動畫已播放標記
                    this.drawingAnimationPlayed = true;
                    
                    // 找到主畫面的結果球 - 使用正確的選擇器
                    const resultBalls = document.querySelectorAll('.results-display-new .number-ball');
                    if (resultBalls.length === 0) {
                        console.log('⚠️ 找不到結果球，跳過洗球動畫');
                        return;
                    }
                    
                    // 播放洗球音效
                    this.playSound('draw');
                    
                    // 將所有球設為洗球狀態，不顯示具體數字
                    resultBalls.forEach((ball, index) => {
                        // 隱藏原始數字，顯示問號
                        ball.setAttribute('data-original-text', ball.textContent);
                        ball.textContent = '?';
                        ball.classList.add('washing-ball');
                        
                        // 添加持續的洗球動畫
                        ball.style.animation = 'ballWashing 0.6s ease-in-out infinite';
                        ball.style.transform = 'scale(1.1)';
                        ball.style.boxShadow = '0 0 20px rgba(255, 255, 255, 0.8)';
                        ball.style.background = 'linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #ffeaa7)';
                        ball.style.backgroundSize = '300% 300%';
                        ball.style.animation += ', gradientWashing 1s ease-in-out infinite';
                    });
                    
                    // 添加整體閃爍效果 - 持續到開獎結束
                    const resultContainer = document.querySelector('.results-display-new');
                    if (resultContainer) {
                        resultContainer.classList.add('washing-container');
                        resultContainer.style.animation = 'containerWashing 1.5s ease-in-out infinite';
                    }
                    
                    console.log('🎲 洗球動畫開始播放（持續到開獎結束）');
                },
                
                // 🎯 停止洗球動畫並顯示最新結果
                async stopDrawEffect() {
                    console.log('🎯 停止洗球動畫，獲取並顯示最新開獎結果');
                    
                    // 先獲取最新的開獎結果
                    const latestResult = await this.getLatestResultFromHistory();
                    if (latestResult) {
                        console.log('🎯 獲取到最新開獎結果');
                        this.lastResult = latestResult;
                        this.lastResults = latestResult;
                    }
                    
                    const resultBalls = document.querySelectorAll('.results-display-new .number-ball');
                    const resultContainer = document.querySelector('.results-display-new');
                    
                    // 停止球的洗球動畫
                    resultBalls.forEach((ball, index) => {
                        ball.classList.remove('washing-ball');
                        ball.style.animation = '';
                        ball.style.transform = '';
                        ball.style.boxShadow = '';
                        ball.style.background = '';
                        ball.style.backgroundSize = '';
                        
                        // 延遲顯示新結果，創造揭曉效果
                        setTimeout(() => {
                            // 使用最新獲取的結果
                            if (this.lastResults && this.lastResults.length > index) {
                                ball.textContent = this.lastResults[index];
                                console.log(`🎯 顯示第${index+1}位結果`);
                            } else {
                                // 恢復原始數字（如果沒有新結果）
                                const originalText = ball.getAttribute('data-original-text');
                                if (originalText) {
                                    ball.textContent = originalText;
                                    console.log(`⚠️ 使用原始數字: ${originalText}`);
                                }
                            }
                            
                            // 添加揭曉動畫
                            ball.style.animation = 'ballReveal 0.5s ease-out';
                            setTimeout(() => {
                                ball.style.animation = '';
                            }, 500);
                        }, index * 150); // 每個球延遲150ms揭曉
                    });
                    
                    // 停止容器動畫
                    if (resultContainer) {
                        resultContainer.classList.remove('washing-container');
                        resultContainer.style.animation = '';
                    }
                    
                    console.log('✅ 洗球動畫停止，最新結果已顯示');
                },
                
                // 🔧 強制停止洗球動畫（同步版本，用於錯誤處理）
                forceStopDrawEffect() {
                    console.log('🚨 強制停止洗球動畫（同步模式）');
                    
                    const resultBalls = document.querySelectorAll('.results-display-new .number-ball');
                    const resultContainer = document.querySelector('.results-display-new');
                    
                    // 立即停止所有球的動畫
                    resultBalls.forEach((ball, index) => {
                        ball.classList.remove('washing-ball');
                        ball.style.animation = '';
                        ball.style.transform = '';
                        ball.style.boxShadow = '';
                        ball.style.background = '';
                        ball.style.backgroundSize = '';
                        
                        // 恢復原始數字或使用當前結果
                        const originalText = ball.getAttribute('data-original-text');
                        if (originalText && originalText !== '?') {
                            ball.textContent = originalText;
                        } else if (this.lastResults && this.lastResults.length > index) {
                            ball.textContent = this.lastResults[index];
                        }
                    });
                    
                    // 停止容器動畫
                    if (resultContainer) {
                        resultContainer.classList.remove('washing-container');
                        resultContainer.style.animation = '';
                    }
                    
                    console.log('🚨 強制停止完成');
                },
                
                // 🎲 開始開獎流程（統一管理整個開獎動畫過程）
                startDrawingProcess() {
                    console.log('🎲 開始開獎流程：封盤→開獎中→12秒洗球動畫');
                    
                    // 重置動畫狀態
                    this.drawingAnimationPlayed = false;
                    this.isDrawingInProgress = true;
                    
                    // 立即嘗試獲取預先生成的結果
                    this.fetchNextResult();
                    
                    // 只開始洗球動畫，賽車動畫等待用戶點擊按鈕
                    console.log('🎪 開始洗球動畫，賽車動畫等待用戶點擊');
                    this.playWashingAnimation();
                    
                    // 12秒後自動停止（對應後端12秒開獎時間）
                    this.drawingTimeout = setTimeout(() => {
                        if (this.isDrawingInProgress) {
                            console.log('⏰ 12秒開獎時間到，自動完成開獎');
                            this.forceCompleteDrawing();
                        }
                    }, 12000);
                },
                
                // 🎲 播放洗球動畫（僅洗球，不顯示結果）
                playWashingAnimation() {
                    console.log('🎪 開始播放洗球動畫');
                    
                    const resultBalls = document.querySelectorAll('.results-display-new .number-ball');
                    const resultContainer = document.querySelector('.results-display-new');
                    
                    if (resultBalls.length === 0) {
                        console.error('❌ 找不到球元素，無法播放洗球動畫');
                        return;
                    }
                    
                    // 播放音效
                    this.playSound('draw');
                    
                    // 開始洗球動畫
                    resultBalls.forEach((ball, index) => {
                        // 保存原始文字
                        ball.setAttribute('data-original-text', ball.textContent);
                        // 顯示問號
                        ball.textContent = '?';
                        // 添加洗球動畫類
                        ball.classList.add('washing-ball');
                    });
                    
                    // 容器添加動畫效果
                    if (resultContainer) {
                        resultContainer.classList.add('washing-container');
                    }
                    
                    console.log('🎪 洗球動畫已開始，持續8秒');
                },
                
                // ✅ 完成開獎流程（停止動畫並更新結果）
                completeDrawingProcess() {
                    console.log('✅ 開始完成開獎流程 - 12秒開獎時間結束');
                    
                    // 清除自動停止計時器
                    if (this.drawingTimeout) {
                        clearTimeout(this.drawingTimeout);
                        this.drawingTimeout = null;
                    }
                    
                    // 標記開獎流程結束
                    this.isDrawingInProgress = false;
                    
                    // 優先使用預先獲取的結果，如果沒有則從歷史記錄獲取
                    let finalResult = null;
                    
                    if (this.nextResult && this.nextResult.length === 10) {
                                                    console.log('✅ 使用預先獲取的開獎結果');
                        finalResult = this.nextResult;
                        
                        // 立即停止洗球動畫並顯示結果
                        this.lastResults = finalResult;
                        this.stopWashingAnimation();
                        this.finishRaceCompetition(finalResult);
                        
                        // 重置標記
                        this.nextResult = null;
                        this.nextResultFetched = false;
                    } else {
                        console.log('⚠️ 沒有預先結果，從數據庫獲取最新結果...');
                        // 延遲1秒後獲取數據庫中的最新結果
                        setTimeout(() => {
                            this.getLatestResultFromHistory().then((latestResult) => {
                                if (latestResult && latestResult.length === 10) {
                                    console.log('📊 從數據庫獲取到最新開獎結果');
                                    this.lastResults = latestResult;
                                    this.stopWashingAnimation();
                                    this.finishRaceCompetition(latestResult);
                                } else {
                                    console.error('❌ 無法獲取開獎結果，強制停止所有動畫');
                                    this.stopWashingAnimation();
                                    this.stopRaceCompetition();
                                }
                            }).catch((error) => {
                                console.error('❌ 獲取結果時出錯:', error);
                                this.stopWashingAnimation();
                                this.stopRaceCompetition();
                            });
                        }, 1000);
                    }
                    
                    // 更新數據（可以立即執行）
                    this.updateBalance();
                    this.updateBetHistory();
                    this.updateHistoryRecords();
                    
                    console.log('✅ 開獎完成流程已啟動');
                },
                
                // 🛑 停止洗球動畫並顯示最新結果
                stopWashingAnimation() {
                    console.log('🛑 停止洗球動畫並更新最新結果');
                    
                    const resultBalls = document.querySelectorAll('.results-display-new .number-ball');
                    const resultContainer = document.querySelector('.results-display-new');
                    
                    // 停止所有球的動畫
                    resultBalls.forEach((ball, index) => {
                        ball.classList.remove('washing-ball');
                        ball.style.animation = '';
                        ball.style.transform = '';
                        ball.style.boxShadow = '';
                        ball.style.background = '';
                        ball.style.backgroundSize = '';
                    });
                    
                    // 停止容器動畫
                    if (resultContainer) {
                        resultContainer.classList.remove('washing-container');
                        resultContainer.style.animation = '';
                    }
                    
                    // 獲取並顯示最新結果
                    this.getLatestResultFromHistory().then((latestResult) => {
                        if (latestResult && latestResult.length > 0) {
                            console.log('📊 獲取到最新開獎結果');
                            this.lastResults = latestResult;
                            
                            // 逐個顯示結果球（揭曉動畫）
                            resultBalls.forEach((ball, index) => {
                                setTimeout(() => {
                                    if (latestResult.length > index) {
                                        ball.textContent = latestResult[index];
                                        ball.setAttribute('data-original-text', latestResult[index]);
                                        ball.style.animation = 'ballReveal 0.5s ease-out';
                                    }
                                }, index * 150);
                            });
                        } else {
                            console.error('❌ 無法獲取最新開獎結果');
                            // 使用當前存儲的結果作為備用
                            resultBalls.forEach((ball, index) => {
                                const originalText = ball.getAttribute('data-original-text');
                                if (originalText && originalText !== '?') {
                                    ball.textContent = originalText;
                                }
                            });
                        }
                    });
                },
                
                // 🚨 強制完成開獎（超時保護）
                forceCompleteDrawing() {
                    console.log('🚨 強制完成開獎流程（超時保護）');
                    this.isDrawingInProgress = false;
                    this.stopWashingAnimation();
                    this.stopRaceCompetition();
                },
                
                // 🏁 開始賽車競賽（真實競賽過程，不預知結果）
                startRaceCompetition() {
                    console.log('🏁 開始賽車競賽 - 10輛車開始角逐');
                    
                    // 移除已存在的賽車覆蓋層
                    const existingOverlay = document.querySelector('.race-competition-overlay');
                    if (existingOverlay) {
                        existingOverlay.remove();
                    }
                    
                    // 創建賽車競賽覆蓋層
                    const raceContainer = document.createElement('div');
                    raceContainer.className = 'race-competition-overlay';
                    raceContainer.style.cssText = `
                        position: fixed;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        background: rgba(0, 0, 0, 0.9);
                        z-index: 10000;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    `;
                    
                    // 創建賽道容器
                    const trackContainer = document.createElement('div');
                    trackContainer.className = 'race-track-container';
                    trackContainer.style.cssText = `
                        width: 95%;
                        max-width: 1200px;
                        height: 500px;
                        background: linear-gradient(135deg, #0f0f23, #1a1a2e);
                        border-radius: 15px;
                        position: relative;
                        overflow: hidden;
                        border: 3px solid #333;
                    `;
                    
                    // 添加競賽標題
                    const title = document.createElement('div');
                    title.style.cssText = `
                        position: absolute;
                        top: 15px;
                        left: 50%;
                        transform: translateX(-50%);
                        color: #ffff00;
                        font-size: 24px;
                        font-weight: bold;
                        text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
                        z-index: 10001;
                    `;
                    title.textContent = '🏁 極速賽車開獎中 🏁';
                    trackContainer.appendChild(title);
                    
                    // 創建終點線
                    const finishLine = document.createElement('div');
                    finishLine.className = 'finish-line';
                    finishLine.style.cssText = `
                        position: absolute;
                        right: 30px;
                        top: 60px;
                        bottom: 30px;
                        width: 6px;
                        background: repeating-linear-gradient(
                            to bottom,
                            #ffffff 0px,
                            #ffffff 20px,
                            #000000 20px,
                            #000000 40px
                        );
                        border-radius: 3px;
                        box-shadow: 0 0 15px rgba(255, 255, 255, 0.8);
                        z-index: 100;
                    `;
                    trackContainer.appendChild(finishLine);
                    
                    // 創建10輛賽車並開始競賽
                    this.createCompetingCars(trackContainer);
                    
                    raceContainer.appendChild(trackContainer);
                    document.body.appendChild(raceContainer);
                    
                    // 儲存覆蓋層引用以便後續控制
                    this.raceOverlay = raceContainer;
                    
                    // 播放音效
                    this.playSound('draw');
                },
                
                // 🏎️ 創建競賽中的賽車
                createCompetingCars(container) {
                    const trackHeight = 400;
                    const carCount = 10;
                    const spacing = trackHeight / carCount;
                    const containerWidth = container.offsetWidth || 1200;
                    
                    this.racingCars = [];
                    
                    for (let i = 1; i <= carCount; i++) {
                        const car = document.createElement('div');
                        car.className = 'racing-car';
                        car.dataset.carNumber = i;
                        car.style.cssText = `
                            position: absolute;
                            left: 50px;
                            top: ${60 + (i-1) * spacing}px;
                            font-size: 28px;
                            z-index: 1000;
                            transition: left 0.3s ease-out;
                            display: flex;
                            align-items: center;
                            gap: 8px;
                        `;
                        
                        car.innerHTML = `
                            🏎️
                            <span style="
                                background: linear-gradient(135deg, #ffffff, #f0f0f0);
                                color: #333;
                                border-radius: 50%;
                                width: 30px;
                                height: 30px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-size: 16px;
                                font-weight: bold;
                                border: 2px solid #666;
                                box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                            ">${i}</span>
                        `;
                        
                        container.appendChild(car);
                        this.racingCars.push({
                            element: car,
                            number: i,
                            position: 50,
                            speed: 0,
                            finalPosition: null
                        });
                    }
                    
                    // 開始隨機競賽動畫
                    this.startRandomRacing();
                },
                
                // 🎯 開始隨機競賽動畫（真實角逐過程）
                startRandomRacing() {
                    console.log('🎯 開始真實賽車競賽，車輛激烈前後角逐');
                    
                    // 給每輛車一個初始基礎速度
                    this.racingCars.forEach(car => {
                        car.speed = 3 + Math.random() * 4; // 初始速度3-7
                        car.acceleration = 0; // 加速度
                        car.momentum = 0; // 動量
                    });
                    
                    this.racingInterval = setInterval(() => {
                        if (!this.isDrawingInProgress || !this.racingCars) {
                            return;
                        }
                        
                        // 每輛車激烈競爭移動
                        this.racingCars.forEach((car, index) => {
                            // 更複雜的速度變化邏輯
                            const randomFactor = Math.random() * 6 - 3; // -3 到 +3 的隨機變化
                            const momentumChange = Math.random() * 2 - 1; // 動量變化
                            
                            // 加速度影響速度
                            car.acceleration += (Math.random() - 0.5) * 0.5;
                            car.acceleration = Math.max(-1, Math.min(1, car.acceleration)); // 限制加速度
                            
                            // 動量系統讓車輛移動更自然
                            car.momentum += car.acceleration;
                            car.momentum *= 0.95; // 動量衰減
                            
                            // 計算最終速度
                            car.speed += randomFactor + car.momentum + momentumChange;
                            car.speed = Math.max(2, Math.min(10, car.speed)); // 速度範圍2-10，更快更激烈
                            
                            // 🎯 如果有預先結果，根據最終排名調整速度
                            if (car.targetSpeed && car.finalRank !== undefined) {
                                const targetDiff = car.targetSpeed - car.speed;
                                car.speed += targetDiff * 0.1; // 逐漸調整到目標速度
                            }
                            
                            // 根據位置調整競爭策略（後面的車更容易加速追趕）
                            const averagePosition = this.racingCars.reduce((sum, c) => sum + c.position, 0) / this.racingCars.length;
                            if (car.position < averagePosition * 0.8) {
                                car.speed += Math.random() * 2; // 落後的車獲得追趕加成
                            }
                            
                            // 根據速度移動位置
                            car.position += car.speed;
                            
                            // 限制不要超過終點線太多
                            const maxPosition = (this.raceOverlay?.querySelector('.race-track-container')?.offsetWidth || 1200) - 120;
                            if (car.position > maxPosition * 0.95) {
                                car.position = maxPosition * 0.95;
                                car.speed *= 0.3; // 大幅減速，不讓車輛到達終點
                            }
                            
                            // 更新視覺位置，添加運動模糊效果
                            car.element.style.left = `${car.position}px`;
                            
                            // 根據速度添加動態效果
                            if (car.speed > 7) {
                                car.element.style.filter = 'drop-shadow(0 0 12px rgba(255, 100, 0, 0.9))';
                                car.element.style.transform = 'scale(1.05)';
                            } else if (car.speed > 5) {
                                car.element.style.filter = 'drop-shadow(0 0 8px rgba(255, 215, 0, 0.8))';
                                car.element.style.transform = 'scale(1.02)';
                            } else {
                                car.element.style.filter = '';
                                car.element.style.transform = '';
                            }
                            
                            // 隨機閃爍效果模擬競爭激烈
                            if (Math.random() > 0.85) {
                                car.element.style.opacity = '0.8';
                                setTimeout(() => {
                                    if (car.element) {
                                        car.element.style.opacity = '1';
                                    }
                                }, 100);
                            }
                        });
                        
                    }, 100); // 提高更新頻率到每100ms，讓競賽更流暢激烈
                },
                
                // 🏆 完成賽車競賽（根據真實開獎結果決定最終排名，拉開距離，不自動關閉）
                finishRaceCompetition(results) {
                    console.log('🏆 開獎結果出來了，賽車競賽結束');
                    
                    // 停止隨機競賽
                    if (this.racingInterval) {
                        clearInterval(this.racingInterval);
                        this.racingInterval = null;
                    }
                    
                    if (!this.racingCars || !this.raceOverlay) {
                        return;
                    }
                    
                    const containerWidth = this.raceOverlay.querySelector('.race-track-container')?.offsetWidth || 1200;
                    const finishLinePosition = containerWidth - 100;
                    
                    // 更新標題顯示競賽結束
                    const title = this.raceOverlay.querySelector('.race-track-container div');
                    if (title) {
                        title.textContent = '🏁 競賽結束 - 最新開獎結果 🏁';
                        title.style.color = '#00ff00';
                    }
                    
                    // 根據開獎結果安排最終位置，拉開更大距離
                    results.forEach((carNumber, rank) => {
                        const car = this.racingCars.find(c => c.number === carNumber);
                        if (car) {
                            // 第一名在終點線，後面車子每名拉開30px距離，更清楚看出名次差距
                            const finalPos = finishLinePosition - (rank * 30);
                            
                            // 動畫移動到最終位置
                            setTimeout(() => {
                                car.element.style.transition = 'left 2s ease-out, filter 0.5s ease, transform 0.5s ease';
                                car.element.style.left = `${finalPos}px`;
                                
                                // 前三名添加特效和排名顯示
                                if (rank < 3) {
                                    car.element.style.filter = 'drop-shadow(0 0 25px gold)';
                                    car.element.style.transform = 'scale(1.15)';
                                    
                                    // 添加金銀銅牌排名顯示
                                    const rankBadge = document.createElement('div');
                                    rankBadge.style.cssText = `
                                        position: absolute;
                                        top: -20px;
                                        right: -15px;
                                        background: ${rank === 0 ? '#FFD700' : rank === 1 ? '#C0C0C0' : '#CD7F32'};
                                        color: #333;
                                        border-radius: 50%;
                                        width: 30px;
                                        height: 30px;
                                        display: flex;
                                        align-items: center;
                                        justify-content: center;
                                        font-size: 14px;
                                        font-weight: bold;
                                        z-index: 1001;
                                        border: 2px solid #fff;
                                        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                                    `;
                                    rankBadge.textContent = rank + 1;
                                    car.element.appendChild(rankBadge);
                                } else {
                                    // 其他名次也添加排名，但樣式不同
                                    const rankBadge = document.createElement('div');
                                    rankBadge.style.cssText = `
                                        position: absolute;
                                        top: -15px;
                                        right: -10px;
                                        background: rgba(255, 255, 255, 0.8);
                                        color: #333;
                                        border-radius: 50%;
                                        width: 25px;
                                        height: 25px;
                                        display: flex;
                                        align-items: center;
                                        justify-content: center;
                                        font-size: 12px;
                                        font-weight: bold;
                                        z-index: 1001;
                                        border: 1px solid #ccc;
                                    `;
                                    rankBadge.textContent = rank + 1;
                                    car.element.appendChild(rankBadge);
                                }
                            }, rank * 400); // 增加到達間隔時間到400ms，讓用戶清楚看到每輛車的到達順序
                        }
                    });
                    
                    // 添加關閉按鈕（不自動關閉，用戶手動控制）
                    setTimeout(() => {
                        const closeButton = document.createElement('button');
                        closeButton.style.cssText = `
                            position: absolute;
                            top: 20px;
                            right: 20px;
                            background: rgba(255, 0, 0, 0.8);
                            color: white;
                            border: none;
                            border-radius: 8px;
                            padding: 12px 20px;
                            font-size: 16px;
                            font-weight: bold;
                            cursor: pointer;
                            z-index: 10002;
                            transition: all 0.3s ease;
                            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                        `;
                        closeButton.innerHTML = '✕ 關閉賽車';
                        closeButton.onclick = () => this.closeRaceCompetition();
                        closeButton.onmouseover = () => {
                            closeButton.style.background = 'rgba(255, 0, 0, 1)';
                            closeButton.style.transform = 'scale(1.05)';
                        };
                        closeButton.onmouseout = () => {
                            closeButton.style.background = 'rgba(255, 0, 0, 0.8)';
                            closeButton.style.transform = 'scale(1)';
                        };
                        
                        this.raceOverlay.querySelector('.race-track-container').appendChild(closeButton);
                    }, 4000); // 4秒後顯示關閉按鈕，給更多時間觀看結果
                },
                
                // 🛑 強制停止賽車競賽
                stopRaceCompetition() {
                    console.log('🛑 強制停止賽車競賽');
                    
                    if (this.racingInterval) {
                        clearInterval(this.racingInterval);
                        this.racingInterval = null;
                    }
                    
                    this.closeRaceCompetition();
                },
                
                // ❌ 關閉賽車競賽覆蓋層
                closeRaceCompetition() {
                    if (this.raceOverlay) {
                        this.raceOverlay.remove();
                        this.raceOverlay = null;
                    }
                    this.racingCars = null;
                    console.log('❌ 賽車競賽覆蓋層已關閉');
                },
                
                // 🏎️ 自動播放賽車動畫（開獎完成後，使用當期新結果）
                playAutoRaceAnimation() {
                    console.log('🏎️ 開獎完成，自動播放賽車動畫展示當期結果');
                    
                    // 確保有最新的開獎結果
                    if (!this.lastResults || this.lastResults.length === 0) {
                        console.log('❌ 沒有開獎結果數據，跳過自動賽車動畫');
                        return;
                    }
                    
                    console.log('🏁 當期開獎結果已載入');
                    
                    // 播放音效
                    this.playSound('draw');
                    
                    // 創建賽車動畫覆蓋層
                    this.createRaceOverlay(() => {
                        console.log('🏎️ 賽車動畫完成，顯示了當期最新結果');
                    });
                },
                
                // 🏁 創建賽車動畫覆蓋層
                createRaceOverlay(callback) {
                    // 移除已存在的覆蓋層
                    const existingOverlay = document.querySelector('.race-animation-overlay');
                    if (existingOverlay) {
                        existingOverlay.remove();
                    }
                    
                    // 創建新的賽車動畫覆蓋層
                    const raceContainer = document.createElement('div');
                    raceContainer.className = 'race-animation-overlay';
                    raceContainer.style.cssText = `
                        position: fixed;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        background: rgba(0, 0, 0, 0.9);
                        z-index: 10000;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    `;
                    
                    // 創建動畫容器
                    const animationContainer = document.createElement('div');
                    animationContainer.className = 'race-animation-container';
                    animationContainer.style.cssText = `
                        width: 90%;
                        max-width: 1000px;
                        height: 400px;
                        background: linear-gradient(135deg, #1a1a2e, #16213e);
                        border-radius: 15px;
                        position: relative;
                        overflow: hidden;
                        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
                        border: 2px solid rgba(255, 255, 255, 0.1);
                    `;
                    
                    // 添加當期開獎結果標題
                    const resultTitle = document.createElement('div');
                    resultTitle.style.cssText = `
                        position: absolute;
                        top: 20px;
                        left: 50%;
                        transform: translateX(-50%);
                        color: white;
                        font-size: 18px;
                        font-weight: bold;
                        z-index: 10001;
                    `;
                    resultTitle.textContent = `第 ${this.currentPeriod} 期開獎結果`;
                    animationContainer.appendChild(resultTitle);
                    
                    // 添加跑道和賽車
                    this.createRaceTrack(animationContainer);
                    
                    // 添加關閉按鈕
                    const closeBtn = document.createElement('button');
                    closeBtn.innerHTML = '✕ 關閉';
                    closeBtn.style.cssText = `
                        position: absolute;
                        top: 20px;
                        right: 20px;
                        background: rgba(255, 255, 255, 0.2);
                        color: white;
                        border: none;
                        padding: 10px 15px;
                        border-radius: 5px;
                        cursor: pointer;
                        z-index: 10001;
                        font-size: 14px;
                    `;
                    closeBtn.onclick = () => {
                        raceContainer.remove();
                    };
                    animationContainer.appendChild(closeBtn);
                    
                    raceContainer.appendChild(animationContainer);
                    document.body.appendChild(raceContainer);
                    
                    // 開始賽車動畫
                    setTimeout(() => {
                        this.startRaceSequence(animationContainer, () => {
                            // 3秒後自動關閉
                            setTimeout(() => {
                                raceContainer.remove();
                                if (callback) callback();
                            }, 3000);
                        });
                    }, 500);
                },
                
                // 🏁 創建賽道和賽車
                createRaceTrack(container) {
                    // 添加終點線
                    const finishLine = document.createElement('div');
                    finishLine.className = 'race-finish-line';
                    finishLine.style.cssText = `
                        position: absolute;
                        right: 20px;
                        top: 50px;
                        bottom: 50px;
                        width: 4px;
                        background: linear-gradient(to bottom, #ff0000, #ff6666, #ff0000);
                        border-radius: 2px;
                        box-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
                    `;
                    container.appendChild(finishLine);
                    
                    // 創建10輛賽車
                    const cars = [];
                    const trackHeight = 300;
                    const carCount = 10;
                    const spacing = trackHeight / carCount;
                    
                    for (let i = 1; i <= carCount; i++) {
                        const car = document.createElement('div');
                        car.className = 'race-car';
                        car.style.cssText = `
                            position: absolute;
                            left: 50px;
                            top: ${50 + (i-1) * spacing}px;
                            font-size: 30px;
                            z-index: 1000;
                            transition: left 2s ease-out;
                        `;
                        car.innerHTML = `🏎️<span style="
                            background: white;
                            color: black;
                            border-radius: 50%;
                            width: 25px;
                            height: 25px;
                            display: inline-flex;
                            align-items: center;
                            justify-content: center;
                            font-size: 14px;
                            font-weight: bold;
                            margin-left: 5px;
                        ">${i}</span>`;
                        container.appendChild(car);
                        cars.push(car);
                    }
                    
                    return cars;
                },
                
                // 🏁 開始賽車序列動畫
                startRaceSequence(container, callback) {
                    const cars = container.querySelectorAll('.race-car');
                    const finishLinePosition = container.offsetWidth - 100;
                    
                    console.log('🏁 賽車開始！');
                    
                    // 根據開獎結果決定每輛車的終點位置
                    cars.forEach((car, index) => {
                        const carNumber = index + 1;
                        const resultPosition = this.lastResults.indexOf(carNumber);
                        
                        if (resultPosition !== -1) {
                            // 根據名次決定到達時間和最終位置
                            const arrivalTime = 500 + (resultPosition * 200); // 第1名500ms，第2名700ms，以此類推
                            const finalPosition = finishLinePosition - (resultPosition * 15); // 名次越前，越靠近終點
                            
                            setTimeout(() => {
                                car.style.left = `${finalPosition}px`;
                                car.style.filter = resultPosition < 3 ? 'drop-shadow(0 0 10px gold)' : '';
                            }, arrivalTime);
                        }
                    });
                    
                    // 2.5秒後動畫完成
                    setTimeout(() => {
                        if (callback) callback();
                    }, 2500);
                },
                // 專門的賽車動畫（只在按鈕點擊時播放）
                playRaceAnimation() {
                    console.log('開始播放賽車動畫...');
                    
                    if (!this.lastResults || this.lastResults.length === 0) {
                        console.log(' 沒有開獎結果數據，跳過賽車動畫');
                        return;
                    }
                    
                    // 播放開獎音效
                    this.playSound('draw');
                    
                    // 創建臨時賽車動畫容器（不覆蓋主畫面結果）
                    let raceContainer = document.querySelector('.race-animation-overlay');
                    if (!raceContainer) {
                        raceContainer = document.createElement('div');
                        raceContainer.className = 'race-animation-overlay';
                        raceContainer.style.cssText = `
                            position: fixed;
                            top: 0;
                            left: 0;
                            width: 100%;
                            height: 100%;
                            background: rgba(0, 0, 0, 0.8);
                            z-index: 10000;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                        `;
                        document.body.appendChild(raceContainer);
                    }
                    
                    // 清空現有內容並創建動畫容器
                    const animationContainer = document.createElement('div');
                    animationContainer.className = 'race-animation-container';
                    animationContainer.style.cssText = `
                        width: 90%;
                        max-width: 1000px;
                        height: 400px;
                        background: linear-gradient(135deg, #1a1a2e, #16213e);
                        border-radius: 15px;
                        position: relative;
                        overflow: hidden;
                        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
                        border: 2px solid rgba(255, 255, 255, 0.1);
                    `;
                    
                    // 添加跑道軌道線
                    const trackLines = document.createElement('div');
                    trackLines.className = 'race-track-lines';
                    animationContainer.appendChild(trackLines);
                    
                    // 添加粒子效果容器
                    const particlesContainer = document.createElement('div');
                    particlesContainer.className = 'particles-container';
                    animationContainer.appendChild(particlesContainer);
                    
                    // 添加開獎狀態指示器
                    const indicator = document.createElement('div');
                    indicator.className = 'drawing-indicator';
                    indicator.textContent = '開獎中...';
                    animationContainer.appendChild(indicator);
                    
                    // 添加終點線
                    const finishLine = document.createElement('div');
                    finishLine.className = 'race-finish-line';
                    animationContainer.appendChild(finishLine);
                    
                    // 創建賽車元素 - 精確10輛車的間距
                    const cars = [];
                    const trackHeight = 400; // 賽道總高度
                    const carCount = 10; // 車輛數量
                    const carHeight = 30; // 車輛高度
                    const availableHeight = trackHeight - 40; // 可用高度（扣除上下邊距）
                    const spacing = availableHeight / carCount; // 每輛車的間距
                    
                    for (let i = 1; i <= carCount; i++) {
                        const car = document.createElement('div');
                        car.className = 'car-racer';
                        car.style.top = `${20 + (i-1) * spacing}px`;
                        car.style.left = '50px';
                        car.dataset.number = i;
                        animationContainer.appendChild(car);
                        cars.push(car);
                    }
                    
                    // 顯示動畫容器
                    raceContainer.innerHTML = '';
                    raceContainer.appendChild(animationContainer);
                    
                    // 添加關閉按鈕
                    const closeBtn = document.createElement('button');
                    closeBtn.innerHTML = '✕ 關閉';
                    closeBtn.style.cssText = `
                        position: absolute;
                        top: 20px;
                        right: 20px;
                        background: rgba(255, 255, 255, 0.2);
                        color: white;
                        border: none;
                        padding: 10px 15px;
                        border-radius: 5px;
                        cursor: pointer;
                        z-index: 10001;
                    `;
                    closeBtn.onclick = () => {
                        raceContainer.remove();
                    };
                    animationContainer.appendChild(closeBtn);
                    
                    // 開始粒子效果
                    this.startParticleEffect(particlesContainer);
                    
                    // 延遲啟動賽車動畫
                    setTimeout(() => {
                        // 移除開獎指示器
                        indicator.style.opacity = '0';
                        setTimeout(() => indicator.remove(), 500);
                        
                        // 開始賽車競賽動畫
                        this.startRaceAnimation(cars, () => {
                            // 動畫完成回調
                            setTimeout(() => {
                                // 添加慶祝效果
                                this.addCelebrationEffect(animationContainer);
                                
                                // 5秒後自動關閉賽車動畫
                                setTimeout(() => {
                                    raceContainer.remove();
                                }, 5000);
                            }, 500);
                        });
                    }, 1000);
                },
                
                // 🎯 增強版結果球顯示
                showEnhancedNumberBalls(container) {
                    container.innerHTML = '';
                    
                    // 創建結果顯示元素
                    const resultDiv = document.createElement('div');
                    resultDiv.className = 'current-result';
                    resultDiv.style.cssText = `
                        display: flex;
                        flex-direction: row;
                        justify-content: space-around;
                        flex-wrap: nowrap;
                        overflow: visible;
                        padding: 20px 10px;
                        background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(0,0,0,0.1));
                        border-radius: 15px;
                        backdrop-filter: blur(10px);
                        margin: 10px 0;
                    `;
                    
                    console.log('📊 顯示開獎結果');
                    
                    // 動畫顯示結果球
                    this.lastResults.forEach((number, index) => {
                        setTimeout(() => {
                            const ball = document.createElement('div');
                            
                            // 使用與主畫面一致的球號樣式
                            ball.className = `number-ball color-${number}`;
                            ball.textContent = number;
                            
                            // 使用與主畫面一致的基本樣式，確保樣式統一
                            ball.style.cssText = `
                                width: 42px;
                                height: 42px;
                                font-size: 20px;
                                font-weight: bold;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                border-radius: 50%;
                                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
                                margin: 0 3px;
                                color: white !important;
                            `;
                            
                            // 移除排名標籤顯示，只保留數字球
                            
                            resultDiv.appendChild(ball);
                            
                            // 播放對應的動畫序列
                            this.playBallAnimationSequence(ball, index);
                            
                        }, index * 200); // 每200毫秒添加一個球，讓動畫更流暢
                    });
                    
                    container.appendChild(resultDiv);
                    
                    // 播放完成音效
                    setTimeout(() => {
                        this.playSound('bet'); // 使用現有音效，您可以添加新的完成音效
                    }, this.lastResults.length * 200 + 1000);
                },
                
                // 🎭 球動畫序列 - 簡化動畫，保持樣式一致
                playBallAnimationSequence(ball, index) {
                    // 簡單的入場動畫
                    ball.style.transform = 'scale(0)';
                    ball.style.transition = 'all 0.5s ease-out';
                    
                    setTimeout(() => {
                        ball.style.transform = 'scale(1)';
                    }, 100);
                    
                    // 移除複雜的動畫效果，保持樣式與主畫面一致
                },
                
                // ✨ 為前三名添加特殊效果
                addSpecialEffects(ball, rank) {
                    // 創建光環效果
                    const halo = document.createElement('div');
                    halo.style.cssText = `
                        position: absolute;
                        top: -5px;
                        left: -5px;
                        right: -5px;
                        bottom: -5px;
                        border-radius: 50%;
                        border: 2px solid ${this.getRankColor(rank)};
                        opacity: 0.7;
                        animation: rotate 3s linear infinite;
                        pointer-events: none;
                    `;
                    
                    ball.style.position = 'relative';
                    ball.appendChild(halo);
                    
                    // 添加旋轉動畫CSS（如果還未添加）
                    if (!document.getElementById('rotate-animation')) {
                        const style = document.createElement('style');
                        style.id = 'rotate-animation';
                        style.textContent = `
                            @keyframes rotate {
                                from { transform: rotate(0deg); }
                                to { transform: rotate(360deg); }
                            }
                        `;
                        document.head.appendChild(style);
                    }
                },
                
                // 🏁 賽車競賽動畫
                startRaceAnimation(cars, callback) {
                    const results = [...this.lastResults]; // 獲取開獎結果
                    const raceDuration = 3000; // 增加動畫時長
                    
                    console.log('賽車結果順序已確定');
                    
                    // 計算終點線位置和安全距離
                    const finishLinePosition = window.innerWidth > 768 ? 
                        document.querySelector('.race-animation-container').offsetWidth - 80 : // 桌面版
                        document.querySelector('.race-animation-container').offsetWidth - 60;   // 手機版
                    
                    // 計算每輛車的終點位置（根據排名）
                    cars.forEach((car, index) => {
                        const carNumber = parseInt(car.dataset.number);
                        const ranking = results.indexOf(carNumber) + 1; // 找到車號在結果中的排名
                        
                        // 根據排名計算到達時間，排名越高越早到達
                        const arrivalTime = (ranking * 200) + Math.random() * 300; // 200ms間隔 + 隨機延遲
                        
                        // 根據排名計算最終位置，確保不超過終點線
                        const maxDistance = finishLinePosition - 70; // 確保不超過終點線
                        const finalPosition = maxDistance - ((ranking - 1) * 15); // 每個排名差15px
                        
                        setTimeout(() => {
                            car.style.transition = `left ${raceDuration - arrivalTime}ms cubic-bezier(0.25, 0.46, 0.45, 0.94)`;
                            car.style.left = `${Math.max(finalPosition, 50)}px`; // 確保不會回到起點之前
                        }, arrivalTime);
                    });
                    
                    // 動畫完成回調
                    setTimeout(() => {
                        if (callback) callback();
                    }, raceDuration + 500);
                },
                
                // ✨ 粒子效果
                startParticleEffect(container) {
                    for (let i = 0; i < 20; i++) {
                        setTimeout(() => {
                            const particle = document.createElement('div');
                            particle.className = 'particle';
                            particle.style.left = `${Math.random() * 100}%`;
                            particle.style.top = `${Math.random() * 100}%`;
                            container.appendChild(particle);
                            
                            // 3秒後移除粒子
                            setTimeout(() => {
                                if (particle.parentNode) {
                                    particle.parentNode.removeChild(particle);
                                }
                            }, 3000);
                        }, i * 100);
                    }
                },
                
                // 🎊 慶祝效果
                addCelebrationEffect(container) {
                    const overlay = document.createElement('div');
                    overlay.className = 'celebration-overlay';
                    container.appendChild(overlay);
                    
                    // 3秒後移除慶祝效果
                    setTimeout(() => {
                        if (overlay.parentNode) {
                            overlay.parentNode.removeChild(overlay);
                        }
                    }, 3000);
                },
                
                // 🏆 獲取排名標籤
                getRankLabel(index) {
                    const labels = ['🥇', '🥈', '🥉', '4th', '5th', '6th', '7th', '8th', '9th', '10th'];
                    return labels[index] || (index + 1) + 'th';
                },
                
                // 🎨 獲取排名顏色
                getRankColor(index) {
                    const colors = [
                        '#FFD700', // 金色 - 冠軍
                        '#C0C0C0', // 銀色 - 亞軍
                        '#CD7F32', // 銅色 - 季軍
                        '#4169E1', // 藍色 - 第四名
                        '#32CD32', // 綠色 - 第五名
                        '#FF6347', // 橙紅色 - 第六名
                        '#9370DB', // 紫色 - 第七名
                        '#20B2AA', // 藍綠色 - 第八名
                        '#DC143C', // 深紅色 - 第九名
                        '#696969'  // 灰色 - 第十名
                    ];
                    return colors[index] || '#808080';
                },
                
                // 📱 向下兼容的結果球顯示（舊函數保留）
                showNumberBalls(container) {
                    // 直接調用增強版函數
                    this.showEnhancedNumberBalls(container);
                },
                
                // 根據數字獲取顏色
                getColorForNumber(number) {
                    const colors = [
                        '#f44336', // 0 紅色
                        '#1976d2', // 1 藍色
                        '#388e3c', // 2 綠色
                        '#ffa000', // 3 橙色
                        '#7b1fa2', // 4 紫色
                        '#c2185b', // 5 桃紅色
                        '#0097a7', // 6 藍綠色
                        '#689f38', // 7 淺綠色
                        '#5d4037', // 8 棕色
                        '#455a64'  // 9 深灰藍色
                    ];
                    return colors[number % colors.length];
                },
                
                // 顯示通知方法
                displayNotification(message, duration = 3000) {
                    this.notificationText = message;
                    this.notificationVisible = true;
                    
                    setTimeout(() => {
                        this.notificationVisible = false;
                    }, duration);
                },
                // 格式化日期時間
                formatDateTime(dateStr) {
                    const date = new Date(dateStr);
                    if (isNaN(date.getTime())) return dateStr;
                    return `${date.getFullYear()}-${(date.getMonth()+1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`;
                },
                
                // 格式化遊戲時間
                formatTime(seconds) {
                    const mins = Math.floor(seconds / 60);
                    const secs = seconds % 60;
                    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
                },
                
                // 獲取熱門投注數據
                fetchHotBets() {
                    fetch(`${this.API_BASE_URL}/api/hot-bets`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                this.hotBets = (data.hotBets || []).map(bet => ({
                                    betType: bet.type,
                                    betValue: bet.value,
                                    position: bet.position,
                                    count: bet.count,
                                    label: bet.label,
                                    isHot: true
                                }));
                                console.log('熱門投注數據獲取成功，共有', this.hotBets.length, '個熱門投注');
                            } else {
                                console.error('獲取熱門投注數據失敗:', data ? data.message : '無數據');
                                this.hotBets = [];
                                this.displayNotification(data.message || '無法獲取熱門投注數據');
                            }
                        })
                        .catch(error => {
                            console.error('獲取熱門投注數據出錯:', error);
                            this.hotBets = [];
                            this.displayNotification('獲取熱門投注數據出錯，請稍後再試');
                            
                            // 可以考慮移除或調整自動重試邏輯，避免在持續 404 的情況下頻繁請求
                            // setTimeout(() => {
                            //     console.log('嘗試重新獲取熱門投注數據...');
                            //     this.fetchHotBets();
                            // }, 30000);
                        });
                },
                
                // 選擇熱門投注項目
                selectHotBet(bet) {
                    console.log('選擇熱門投注:', bet);
                    // 根據熱門投注的類型和值，添加到選擇的投注列表
                    if (bet && bet.betType) {
                        // 先設置金額為預設投注金額
                        this.betAmount = this.defaultBetAmount;
                        
                        // 根據投注類型選擇
                        this.selectBet(
                            bet.betType,
                            bet.betValue,
                            bet.position || null
                        );
                        
                        // 顯示通知
                        this.showNotification(`已添加熱門投注: ${bet.label}`);
                    }
                },
                
                // 顯示通知訊息
                showNotification(message, duration = 3000) {
                    this.notificationText = message;
                    this.notificationVisible = true;
                    
                    // 設置定時器，自動隱藏通知
                    setTimeout(() => {
                        this.notificationVisible = false;
                    }, duration);
                },
                
                // 獲取投注類型描述
                getBetTypeDesc(betType) {
                    const typeMap = {
                        'champion': '冠軍',
                        'runnerup': '亞軍',
                        'number': '單號',
                        'sumValue': '冠亞和',
                        'dragonTiger': '龍虎'
                    };
                    return typeMap[betType] || '未知類型';
                },
                
                // 獲取投注值描述
                getBetValueDesc(bet) {
                    const betType = bet.type || bet.betType;
                    const betValue = bet.value || bet.betValue;
                    
                    if (!betValue) return '無';
                    
                    if (betType === 'dragonTiger') {
                        const dragonTigerMap = {
                            'dragon': '龍',
                            'tiger': '虎'
                        };
                        return dragonTigerMap[betValue] || betValue;
                    } else if (['big', 'small', 'odd', 'even'].includes(betValue)) {
                        const valueMap = {
                            'big': '大',
                            'small': '小',
                            'odd': '單',
                            'even': '雙'
                        };
                        return valueMap[betValue] || betValue;
                    } else if (betType === 'sumValue' && !isNaN(betValue)) {
                        return `總和值 ${betValue}`;
                    } else if ((betType === 'champion' || betType === 'runnerup') && !isNaN(betValue)) {
                        return `${betValue}號`;
                    } else if (betType === 'number' && !isNaN(betValue)) {
                        let positionText = '';
                        if (bet.position) {
                            positionText = `第${bet.position}名 `;
                        }
                        return `${positionText}${betValue}號`;
                    }
                    
                    return betValue;
                },
                
                // 添加熱門投注到選擇列表
                addHotBet(bet) {
                    // 檢查投注額
                    if (!this.betAmount || this.betAmount <= 0) {
                        this.displayNotification('請先設置投注金額');
                        return;
                    }
                    
                    // 創建投注選項
                    const betOption = {
                        type: bet.betType,
                        value: bet.betValue,
                        position: bet.position,
                        amount: this.betAmount
                    };
                    
                    // 檢查是否已經選擇了這個投注
                    const existingBetIndex = this.selectedBets.findIndex(b => 
                        b.type === betOption.type && 
                        b.value === betOption.value && 
                        b.position === betOption.position
                    );
                    
                    if (existingBetIndex === -1) {
                        // 添加新投注
                        this.selectedBets.push(betOption);
                        this.displayNotification(`已添加熱門投注: ${this.getBetTypeDesc(bet.betType)} ${this.getBetValueDesc(betOption)}`);
                    } else {
                        // 取消已選投注
                        this.selectedBets.splice(existingBetIndex, 1);
                        this.displayNotification('已取消該投注選項');
                    }
                },
                
                // 歷史開獎記錄展示
                showDrawHistory() {
                    // 顯示歷史開獎記錄彈窗
                    this.updateHistoryRecords();
                    this.showHistory = true;
                    this.showDropdownMenu = false; // 關閉選單
                },

                // 按日期搜尋歷史開獎
                searchHistoryByDate() {
                    if (this.historySearchDate) {
                        this.updateHistoryRecords(1, this.historySearchDate, '');
                    }
                },

                // 按期數搜尋歷史開獎
                searchHistoryByPeriod() {
                    if (this.historySearchPeriod) {
                        this.updateHistoryRecords(1, '', this.historySearchPeriod);
                    } else {
                        this.updateHistoryRecords(1, this.historySearchDate, '');
                    }
                },

                // 搜尋今日開獎
                searchTodayHistory() {
                    const today = new Date().toISOString().split('T')[0];
                    this.historySearchDate = today;
                    this.historySearchPeriod = '';
                    this.updateHistoryRecords(1, today, '');
                },

                // 清除搜尋條件
                clearHistorySearch() {
                    this.historySearchDate = '';
                    this.historySearchPeriod = '';
                    this.updateHistoryRecords();
                },
                
                // 下注記錄展示
                showBetRecords() {
                    // 顯示下注記錄彈窗
                    this.updateBetHistory();
                    this.showRecords = true;
                    this.showDropdownMenu = false; // 關閉選單
                },
                
                // 盈虧記錄展示
                showProfitRecords() {
                    this.showProfitModal = true;
                    this.getProfitRecords();
                    this.showDropdownMenu = false; // 關閉選單
                },
                
                // 切換盈虧記錄時間範圍
                switchProfitRange(range) {
                    this.profitTimeRange = range;
                    this.getProfitRecords();
                },
                
                // 獲取盈虧記錄
                getProfitRecords() {
                    const username = sessionStorage.getItem('username');
                    if (!username) {
                        console.error('用戶未登入，無法獲取盈虧記錄');
                        return;
                    }
                    
                    // 計算週的開始和結束日期
                    const now = new Date();
                    let startDate, endDate;
                    
                    if (this.profitTimeRange === 'thisWeek') {
                        // 本週：從這週的星期一到星期日
                        const currentWeekday = now.getDay(); // 0=星期日, 1=星期一, ...
                        const daysToMonday = currentWeekday === 0 ? 6 : currentWeekday - 1; // 計算到星期一的天數
                        
                        startDate = new Date(now);
                        startDate.setDate(now.getDate() - daysToMonday);
                        startDate.setHours(0, 0, 0, 0);
                        
                        endDate = new Date(startDate);
                        endDate.setDate(startDate.getDate() + 6);
                        endDate.setHours(23, 59, 59, 999);
                    } else if (this.profitTimeRange === 'lastWeek') {
                        // 上週：從上週的星期一到星期日
                        const currentWeekday = now.getDay();
                        const daysToMonday = currentWeekday === 0 ? 6 : currentWeekday - 1;
                        
                        startDate = new Date(now);
                        startDate.setDate(now.getDate() - daysToMonday - 7); // 往前推一週
                        startDate.setHours(0, 0, 0, 0);
                        
                        endDate = new Date(startDate);
                        endDate.setDate(startDate.getDate() + 6);
                        endDate.setHours(23, 59, 59, 999);
                    }
                    
                    const weekType = this.profitTimeRange === 'thisWeek' ? '本週' : '上週';
                    console.log(`正在獲取用戶 ${username} 的${weekType}盈虧記錄...`);
                    console.log(`週期範圍: ${startDate.toISOString()} 到 ${endDate.toISOString()}`);
                    
                    fetch(`${this.API_BASE_URL}/api/weekly-profit-records?username=${username}fetch(`${this.API_BASE_URL}/api/profit-records?username=${username}&days=${days}`)startDate=${startDate.toISOString()}fetch(`${this.API_BASE_URL}/api/profit-records?username=${username}&days=${days}`)endDate=${endDate.toISOString()}`)
                        .then(response => {
                            console.log('盈虧記錄API響應狀態:', response.status);
                            return response.json();
                        })
                        .then(data => {
                            console.log('盈虧記錄API響應數據:', data);
                            if (data.success) {
                                this.profitRecords = data.records || [];
                                this.totalBetCount = data.totalBetCount || 0;
                                this.totalProfit = data.totalProfit || 0;
                                console.log(`成功載入 ${this.profitRecords.length} 條盈虧記錄`);
                            } else {
                                console.error('獲取盈虧記錄失敗:', data.message);
                                this.profitRecords = [];
                                this.totalBetCount = 0;
                                this.totalProfit = 0;
                            }
                        })
                        .catch(error => {
                            console.error('獲取盈虧記錄出錯:', error);
                            this.profitRecords = [];
                            this.totalBetCount = 0;
                            this.totalProfit = 0;
                        });
                },
                
                // 顯示單日詳細記錄
                showDayDetail(date) {
                    this.selectedDate = date;
                    this.showDayDetailModal = true;
                    this.getDayDetailRecords(date);
                },
                
                // 獲取單日詳細記錄
                getDayDetailRecords(date) {
                    const username = sessionStorage.getItem('username');
                    if (!username) return;
                    
                    fetch(`${this.API_BASE_URL}/api/day-detail?username=${username}&date=${date}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                this.dayDetailRecords = data.records;
                                this.dayDetailStats = data.stats;
                            } else {
                                console.error('獲取單日詳細記錄失敗:', data.message);
                                this.dayDetailRecords = [];
                                this.dayDetailStats = { betCount: 0, profit: 0 };
                            }
                        })
                        .catch(error => {
                            console.error('獲取單日詳細記錄出錯:', error);
                            this.dayDetailRecords = [];
                            this.dayDetailStats = { betCount: 0, profit: 0 };
                        });
                },
                
                // 格式化日期
                formatDate(dateString) {
                    const date = new Date(dateString);
                    return `${date.getMonth() + 1}/${date.getDate()}`;
                },
                
                // 格式化標題日期
                formatDateTitle(dateString) {
                    const date = new Date(dateString);
                    // 如果是ISO格式，轉換為台北時區
                    let displayDate = date;
                    if (dateString.includes('T')) {
                        displayDate = new Date(date.getTime() + 8 * 60 * 60 * 1000);
                    }
                    
                    const year = displayDate.getFullYear();
                    const month = (displayDate.getMonth() + 1).toString().padStart(2, '0');
                    const day = displayDate.getDate().toString().padStart(2, '0');
                    const weekdays = ['日', '一', '二', '三', '四', '五', '六'];
                    const weekday = weekdays[displayDate.getDay()];
                    return `${year}/${month}/${day} (星期${weekday})`;
                },
                
                // 格式化日期時間
                formatDateTime(dateString) {
                    if (!dateString) return '';
                    const date = new Date(dateString);
                    // 轉換為台北時區顯示
                    const taipeiTime = new Date(date.getTime() + 8 * 60 * 60 * 1000);
                    const month = (taipeiTime.getMonth() + 1).toString().padStart(2, '0');
                    const day = taipeiTime.getDate().toString().padStart(2, '0');
                    const hours = taipeiTime.getHours().toString().padStart(2, '0');
                    const minutes = taipeiTime.getMinutes().toString().padStart(2, '0');
                    return `${month}/${day} ${hours}:${minutes}`;
                },
                
                // 獲取星期幾
                getWeekday(dateString) {
                    const date = new Date(dateString);
                    const weekdays = ['日', '一', '二', '三', '四', '五', '六'];
                    return `星期${weekdays[date.getDay()]}`;
                },
                
                // 格式化投注類型
                formatBetType(betType, value, position) {
                    const typeMap = {
                        'champion': '冠軍',
                        'runnerup': '亞軍',
                        'third': '第三名',
                        'fourth': '第四名',
                        'fifth': '第五名',
                        'sixth': '第六名',
                        'seventh': '第七名',
                        'eighth': '第八名',
                        'ninth': '第九名',
                        'tenth': '第十名',
                        'number': '單號',
                        'sumValue': '冠亞和',
                        'dragonTiger': '龍虎'
                    };
                    
                    let result = typeMap[betType] || betType;
                    
                    if (position && betType === 'number') {
                        result = `第${position}名號碼`;
                    } else if (['champion', 'runnerup', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth'].includes(betType) && 
                               ['big', 'small', 'odd', 'even'].includes(value)) {
                        result += ' 雙面';
                    } else if (betType === 'sumValue' && ['big', 'small', 'odd', 'even'].includes(value)) {
                        result = '冠亞和 雙面';
                    }
                    
                    return result;
                },
                
                // 格式化投注值
                formatBetValue(value) {
                    if (!value) return '無';
                    
                    const valueMap = {
                        'big': '大',
                        'small': '小',
                        'odd': '單',
                        'even': '雙',
                        'dragon': '龍',
                        'tiger': '虎'
                    };
                    
                    if (valueMap[value]) {
                        return valueMap[value];
                    } else if (!isNaN(value)) {
                        return `號碼 ${value}`;
                    }
                    
                    return value;
                },
                
                // 關閉彈窗
                closeModal(selector) {
                    document.querySelector(selector).style.display = 'none';
                },
                login() {
                    fetch(`${this.API_BASE_URL}/api/member/login`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            username: this.loginForm.username,
                            password: this.loginForm.password
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            sessionStorage.setItem('isLoggedIn', 'true');
                            sessionStorage.setItem('username', data.member.username);
                            sessionStorage.setItem('balance', data.member.balance);
                            sessionStorage.setItem('memberId', data.member.id);
                            this.username = data.member.username;
                            this.balance = data.member.balance;
                            this.checkLoginStatus();
                            this.showNotification('登入成功！');
                        } else {
                            this.showNotification('登入失敗，請檢查用戶名和密碼。');
                        }
                    })
                    .catch(error => {
                        console.error('登入失敗:', error);
                        this.showNotification('登入失敗，請稍後再試。');
                    });
                },
                register() {
                    fetch(`${this.API_BASE_URL}/api/register`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            username: this.registerForm.username,
                            password: this.registerForm.password,
                            confirmPassword: this.registerForm.confirmPassword
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.showNotification('註冊成功！');
                            this.showLoginModal = true;
                            this.showRegisterModal = false;
                        } else {
                            this.showNotification('註冊失敗，請檢查輸入的資料。');
                        }
                    })
                    .catch(error => {
                        console.error('註冊失敗:', error);
                        this.showNotification('註冊失敗，請稍後再試。');
                    });
                },
                handleClickOutside(event) {
                    const menuContainer = this.$refs.menuContainer;
                    if (menuContainer && !menuContainer.contains(event.target)) {
                        this.showDropdownMenu = false;
                    }
                    
                    // 檢查是否點擊在籌碼容器外部
                    const chipsContainer = document.querySelector('.chips-container');
                    const chipsPopup = document.querySelector('.chips-popup');
                    if (chipsContainer && chipsPopup && 
                        !chipsContainer.contains(event.target) && 
                        !chipsPopup.contains(event.target)) {
                        this.showChips = false;
                    }
                },
                showBetSlip(betType, choice, odds) {
                    // Implement the logic to show the bet slip for the selected bet
                    console.log(`Showing bet slip for ${betType}: ${choice} with odds: ${odds}`);
                },
            },
            mounted() {
                this.initCountdown();
                this.updateGameData();
                this.fetchHotBets();  // 加載熱門投注數據
                
                // 每隔10秒刷新一次遊戲數據
                setInterval(() => {
                    this.updateGameData();
                }, 10000);
                
                // 每隔30秒刷新一次餘額
                setInterval(() => {
                    if (this.isLoggedIn) {
                        this.updateBalance();
                    }
                }, 30000);
                
                // 每隔60秒刷新一次注單歷史
                setInterval(() => {
                    if (this.isLoggedIn) {
                this.updateBetHistory();
                    }
                }, 60000);
                
                // 每隔5分鐘刷新一次熱門投注數據
                setInterval(() => {
                    this.fetchHotBets();
                }, 5 * 60 * 1000);
                
                // 初始檢查登入狀態
                this.checkLoginStatus();
                
                // 更新初始資料
                this.updateDailyStats();
                this.updateHistoryRecords();
            },
            beforeDestroy() {
                if (this.socket) {
                    this.socket.disconnect();
                }
                document.removeEventListener('click', this.handleClickOutside);
            },
            watch: {
                showDropdownMenu(isOpen) {
                    if (isOpen) {
                        // Use timeout to prevent the click that opens the menu from immediately closing it.
                        setTimeout(() => {
                            document.addEventListener('click', this.handleClickOutside);
                        }, 0);
                    } else {
                        document.removeEventListener('click', this.handleClickOutside);
                    }
                },
                showChips(isOpen) {
                    if (isOpen) {
                        setTimeout(() => {
                            document.addEventListener('click', this.handleClickOutside);
                        }, 0);
                    } else {
                        if (!this.showDropdownMenu) {
                            document.removeEventListener('click', this.handleClickOutside);
                        }
                    }
                }
            },
        });
    </script>
    <!-- 最後引入主要腳本 -->
    <!-- <script src="./src/scripts/main.js"></script> 已移除，避免登入界面出現 -->
</body>
</html>