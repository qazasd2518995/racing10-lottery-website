/**
 * Ê∏¨Ë©¶‰ª£ÁêÜÈÄÄÊ∞¥Ë®≠ÂÆöÊï∏Êìö‰øùÁïôÂäüËÉΩ
 * È©óË≠âÈÄ≤ÂÖ•‰ª£ÁêÜÊúÉÂì°ÁÆ°ÁêÜÊôÇÈÄÄÊ∞¥Ë®≠ÂÆöÊï∏Êìö‰∏çÊúÉÈÅ∫Â§±
 */

console.log('üß™ Ê∏¨Ë©¶‰ª£ÁêÜÈÄÄÊ∞¥Ë®≠ÂÆöÊï∏Êìö‰øùÁïôÂäüËÉΩ');

// Ê®°Êì¨ÂéüÂßã‰ª£ÁêÜÊï∏ÊìöÔºàÂåÖÂê´ÂÆåÊï¥ÈÄÄÊ∞¥Ë®≠ÂÆöÔºâ
const originalAgent = {
    id: 67,
    username: "sdadsad",
    level: 1,
    rebate_mode: "percentage",
    rebate_percentage: "0.0100",  // 1.0%
    max_rebate_percentage: "0.0100",
    market_type: "A",
    balance: 1000,
    status: 1
};

console.log('üìã ÂéüÂßã‰ª£ÁêÜÊï∏Êìö:', originalAgent);

// Ê®°Êì¨ agents Êï∏ÁµÑ
const agents = [originalAgent];

// Ê®°Êì¨‰øÆÂæ©ÂâçÁöÑ enterAgentMemberManagement ÂáΩÊï∏ÔºàÊúÉÈÅ∫Â§±Êï∏ÊìöÔºâ
function enterAgentMemberManagementOld(agent) {
    let agentLevel = agent.level;
    
    const currentMemberManagingAgent = {
        id: agent.id,
        username: agent.username,
        level: agentLevel
        // Ê≥®ÊÑèÔºöÈÄôË£°ÈÅ∫Â§±‰∫Ü rebate_percentage Á≠âÈáçË¶ÅÊï∏Êìö
    };
    
    return currentMemberManagingAgent;
}

// Ê®°Êì¨‰øÆÂæ©ÂæåÁöÑ enterAgentMemberManagement ÂáΩÊï∏Ôºà‰øùÁïôÂÆåÊï¥Êï∏ÊìöÔºâ
function enterAgentMemberManagementNew(agent) {
    let agentLevel = agent.level;
    
    const currentMemberManagingAgent = {
        id: agent.id,
        username: agent.username,
        level: agentLevel,
        rebate_percentage: agent.rebate_percentage,
        max_rebate_percentage: agent.max_rebate_percentage,
        rebate_mode: agent.rebate_mode,
        market_type: agent.market_type,
        balance: agent.balance,
        status: agent.status
    };
    
    return currentMemberManagingAgent;
}

// Ê®°Êì¨‰øÆÂæ©ÂæåÁöÑ goBackToParentMember ÂáΩÊï∏
function goBackToParentMemberNew(parentId) {
    // Âæû agents Êï∏ÁµÑ‰∏≠ÊâæÂà∞ÂÆåÊï¥ÁöÑ‰ª£ÁêÜË≥áÊñô
    const fullAgentData = agents.find(a => a.id === parentId);
    
    if (fullAgentData) {
        return {
            id: fullAgentData.id,
            username: fullAgentData.username,
            level: fullAgentData.level,
            rebate_percentage: fullAgentData.rebate_percentage,
            max_rebate_percentage: fullAgentData.max_rebate_percentage,
            rebate_mode: fullAgentData.rebate_mode,
            market_type: fullAgentData.market_type,
            balance: fullAgentData.balance,
            status: fullAgentData.status
        };
    }
    
    return null;
}

// Ê®°Êì¨ availableMaxRebatePercentage Ë®àÁÆóÈÇèËºØ
function calculateAvailableMaxRebatePercentage(managingAgent, user) {
    let actualRebatePercentage = managingAgent.rebate_percentage;
    
    if (actualRebatePercentage !== undefined && actualRebatePercentage !== null && actualRebatePercentage !== '') {
        actualRebatePercentage = parseFloat(actualRebatePercentage);
    } else {
        actualRebatePercentage = null;
    }
    
    if (actualRebatePercentage === null || isNaN(actualRebatePercentage) || actualRebatePercentage <= 0) {
        actualRebatePercentage = parseFloat(managingAgent.max_rebate_percentage) || 0;
    }
    
    if (isNaN(actualRebatePercentage) || actualRebatePercentage <= 0) {
        const marketType = managingAgent.market_type || user.market_type || 'D';
        actualRebatePercentage = marketType === 'A' ? 0.011 : 0.041;
    }
    
    return actualRebatePercentage;
}

// Ê∏¨Ë©¶Áî®Êà∂Êï∏Êìö
const user = {
    market_type: 'A',
    level: 0
};

console.log('\n=== Ê∏¨Ë©¶‰øÆÂæ©Ââç vs ‰øÆÂæ©Âæå ===');

// Ê∏¨Ë©¶‰øÆÂæ©Ââç
console.log('\nüî¥ ‰øÆÂæ©Ââç - enterAgentMemberManagement:');
const oldResult = enterAgentMemberManagementOld(originalAgent);
console.log('Ë®≠ÂÆöÁöÑ currentMemberManagingAgent:', oldResult);
console.log('rebate_percentage:', oldResult.rebate_percentage, '(ÈÅ∫Â§±!)');
console.log('market_type:', oldResult.market_type, '(ÈÅ∫Â§±!)');

const oldAvailableRebate = calculateAvailableMaxRebatePercentage(oldResult, user);
console.log('Ë®àÁÆóÁöÑ availableMaxRebatePercentage:', oldAvailableRebate, '= ' + (oldAvailableRebate * 100).toFixed(1) + '%');

// Ê∏¨Ë©¶‰øÆÂæ©Âæå
console.log('\nüü¢ ‰øÆÂæ©Âæå - enterAgentMemberManagement:');
const newResult = enterAgentMemberManagementNew(originalAgent);
console.log('Ë®≠ÂÆöÁöÑ currentMemberManagingAgent:', newResult);
console.log('rebate_percentage:', newResult.rebate_percentage, '(‰øùÁïôÂÆåÊï¥!)');
console.log('market_type:', newResult.market_type, '(‰øùÁïôÂÆåÊï¥!)');

const newAvailableRebate = calculateAvailableMaxRebatePercentage(newResult, user);
console.log('Ë®àÁÆóÁöÑ availableMaxRebatePercentage:', newAvailableRebate, '= ' + (newAvailableRebate * 100).toFixed(1) + '%');

console.log('\n=== Ê∏¨Ë©¶ËøîÂõû‰∏äÁ¥ö‰ª£ÁêÜÂäüËÉΩ ===');

// Ê∏¨Ë©¶ËøîÂõû‰∏äÁ¥ö‰ª£ÁêÜ
console.log('\nüü¢ ‰øÆÂæ©Âæå - goBackToParentMember:');
const backResult = goBackToParentMemberNew(67);
console.log('ËøîÂõû‰∏äÁ¥ö‰ª£ÁêÜÊï∏Êìö:', backResult);
console.log('rebate_percentage:', backResult?.rebate_percentage, '(Ê≠£Á¢∫‰øùÁïô!)');
console.log('market_type:', backResult?.market_type, '(Ê≠£Á¢∫‰øùÁïô!)');

if (backResult) {
    const backAvailableRebate = calculateAvailableMaxRebatePercentage(backResult, user);
    console.log('Ë®àÁÆóÁöÑ availableMaxRebatePercentage:', backAvailableRebate, '= ' + (backAvailableRebate * 100).toFixed(1) + '%');
}

console.log('\n=== Ê∏¨Ë©¶ÁµêÊûúÁ∏ΩÁµê ===');
console.log('‚úÖ ‰øÆÂæ©ÂâçÂïèÈ°åÔºörebate_percentage ÈÅ∫Â§±Â∞éËá¥‰ΩøÁî®ÈªòË™çÂÄº 1.1%');
console.log('‚úÖ ‰øÆÂæ©ÂæåÊïàÊûúÔºöÊ≠£Á¢∫‰ΩøÁî®‰ª£ÁêÜÁöÑ rebate_percentage 1.0%');
console.log('‚úÖ Êï∏Êìö‰øùÁïôÔºöÂ±§Á¥öÂàáÊèõÊôÇÂÆåÊï¥‰øùÁïôÈÄÄÊ∞¥Ë®≠ÂÆöÊï∏Êìö');
console.log('‚úÖ Âêë‰∏ãÂÖºÂÆπÔºöÊâæ‰∏çÂà∞ÂÆåÊï¥Êï∏ÊìöÊôÇÂõûÈÄÄÂà∞Âü∫Êú¨Ë≥áÊñô');

console.log('\nüéâ Ê∏¨Ë©¶ÂÆåÊàêÔºÅ‰ª£ÁêÜÈÄÄÊ∞¥Ë®≠ÂÆöÊï∏Êìö‰øùÁïôÂäüËÉΩ‰øÆÂæ©ÊàêÂäüÔºÅ'); 