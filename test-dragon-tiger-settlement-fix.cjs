const axios = require('axios');\n\n// 龍虎投注結算修復測試\nasync function testDragonTigerSettlementFix() {\n    console.log('🐉🐅 測試龍虎投注結算修復...\\n');\n    \n    // 模擬開獎結果: [9,5,7,3,6,1,4,10,8,2]\n    // 第5名=6, 第6名=1, 6>1 龍勝\n    const winResult = [9,5,7,3,6,1,4,10,8,2];\n    \n    // 測試各種龍虎投注格式的結算邏輯\n    const testBets = [\n        {\n            id: 919,\n            username: 'justin111',\n            amount: '100.00',\n            bet_type: 'dragonTiger',\n            bet_value: 'dragon_5_6', // 第5名vs第6名，龍\n            odds: '1.98',\n            description: '第5名vs第6名 龍投注 (6>1 應該中獎)'\n        },\n        {\n            id: 920,\n            username: 'test',\n            amount: '100.00',\n            bet_type: 'dragonTiger', \n            bet_value: 'tiger_5_6', // 第5名vs第6名，虎\n            odds: '1.98',\n            description: '第5名vs第6名 虎投注 (6>1 應該不中獎)'\n        },\n        {\n            id: 921,\n            username: 'test2',\n            amount: '100.00',\n            bet_type: 'dragonTiger',\n            bet_value: 'dragon_3_8', // 第3名vs第8名\n            odds: '1.98', \n            description: '第3名vs第8名 龍投注 (7<10 應該不中獎)'\n        },\n        {\n            id: 922,\n            username: 'test3',\n            amount: '100.00',\n            bet_type: 'dragonTiger',\n            bet_value: 'tiger_3_8', // 第3名vs第8名\n            odds: '1.98',\n            description: '第3名vs第8名 虎投注 (7<10 應該中獎)'\n        },\n        {\n            id: 923,\n            username: 'test4', \n            amount: '100.00',\n            bet_type: 'dragonTiger',\n            bet_value: 'dragon', // 傳統格式冠軍vs亞軍\n            odds: '1.98',\n            description: '冠軍vs亞軍 龍投注 (9>5 應該中獎)'\n        }\n    ];\n    \n    console.log('📊 開獎結果:', winResult);\n    console.log('第1名(冠軍):', winResult[0]);\n    console.log('第2名(亞軍):', winResult[1]);\n    console.log('第3名:', winResult[2]);\n    console.log('第5名:', winResult[4]);\n    console.log('第6名:', winResult[5]);\n    console.log('第8名:', winResult[7]);\n    console.log();\n    \n    // 模擬結算邏輯測試\n    console.log('🧮 測試結算邏輯:\\n');\n    \n    testBets.forEach(bet => {\n        console.log(`📋 測試: ${bet.description}`);\n        console.log(`   投注: ${bet.bet_value}, 金額: $${bet.amount}`);\n        \n        const winAmount = calculateWinAmountMock(bet, winResult);\n        const isWin = winAmount > 0;\n        \n        console.log(`   結果: ${isWin ? '✅ 中獎' : '❌ 未中獎'}, 獎金: $${winAmount.toFixed(2)}`);\n        console.log();\n    });\n}\n\n// 模擬calculateWinAmount函數\nfunction calculateWinAmountMock(bet, winResult) {\n    const amount = parseFloat(bet.amount);\n    const betOdds = parseFloat(bet.odds);\n    \n    if (bet.bet_type === 'dragonTiger') {\n        let dragonTigerType, pos1, pos2;\n        \n        if (bet.bet_value === 'dragon' || bet.bet_value === 'tiger') {\n            // 傳統格式：默認冠軍vs亞軍\n            dragonTigerType = bet.bet_value;\n            pos1 = 0; // 冠軍\n            pos2 = 1; // 亞軍\n        } else if (typeof bet.bet_value === 'string' && \n                   (bet.bet_value.startsWith('dragon_') || bet.bet_value.startsWith('tiger_'))) {\n            // 複雜格式：dragon_5_6 表示第5名vs第6名\n            const parts = bet.bet_value.split('_');\n            if (parts.length === 3) {\n                dragonTigerType = parts[0];\n                pos1 = parseInt(parts[1]) - 1; // 轉為0-9索引\n                pos2 = parseInt(parts[2]) - 1;\n                \n                // 驗證位置有效性\n                if (isNaN(pos1) || isNaN(pos2) || pos1 < 0 || pos1 > 9 || pos2 < 0 || pos2 > 9 || pos1 === pos2) {\n                    console.warn(`⚠️ 龍虎結算：無效的投注格式: ${bet.bet_value}`);\n                    return 0;\n                }\n            } else {\n                console.warn(`⚠️ 龍虎結算：無法解析投注格式: ${bet.bet_value}`);\n                return 0;\n            }\n        } else {\n            console.warn(`⚠️ 龍虎結算：未知的投注格式: ${bet.bet_value}`);\n            return 0;\n        }\n        \n        // 獲取對應位置的開獎號碼\n        const pos1Value = winResult[pos1];\n        const pos2Value = winResult[pos2];\n        \n        console.log(`       🐉🐅 龍虎結算檢查: ${bet.bet_value}, 第${pos1+1}名=${pos1Value}, 第${pos2+1}名=${pos2Value}`);\n        \n        // 判斷龍虎結果\n        if (dragonTigerType === 'dragon' && pos1Value > pos2Value) {\n            console.log(`       ✅ 龍虎中獎: 龍勝 (${pos1Value} > ${pos2Value})`);\n            return Math.round(amount * betOdds * 100) / 100;\n        } else if (dragonTigerType === 'tiger' && pos1Value < pos2Value) {\n            console.log(`       ✅ 龍虎中獎: 虎勝 (${pos1Value} < ${pos2Value})`);\n            return Math.round(amount * betOdds * 100) / 100;\n        } else {\n            console.log(`       ❌ 龍虎未中獎: 投注${dragonTigerType}, 實際${pos1Value > pos2Value ? '龍' : pos1Value < pos2Value ? '虎' : '和'}勝`);\n        }\n    }\n    \n    return 0;\n}\n\n// 執行測試\ntestDragonTigerSettlementFix().catch(console.error); 